[{"content":"ソフトウェア開発のバイブルと言える名著「ソフトウェア開発　２０１の鉄則」。30年以上のソフトウェア工学の知見をもとに出版。そして、その後著しく進化した現代でも全く色あせないそれぞれの教訓を、現代のソフトウェア開発のトレンドに照らし合わせながら「４行で」言い表してみることにする。\n","date":"2023-10-15T07:28:21+09:00","permalink":"https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-201%E3%81%AE%E9%89%84%E5%89%87%E3%81%AE%E5%90%84%E9%89%84%E5%89%87%E3%82%92%EF%BC%94%E8%A1%8C%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B/","title":"「ソフトウェア開発 201の鉄則」の各鉄則を４行でまとめてみる"},{"content":"「三日坊主選手権」があったら全国大会に出場できる自信あります。それくらい飽きっぽくてブログは何度も初めては放置して、、の繰り返しでしたが、 毎日何か思うことがあるので、それを文章化してみようかな、と。\nサイト構築にはみーとみの個人ブログの情報が大変役立ちました。ありがとうございます！\n","date":"2023-10-15T07:12:51+09:00","permalink":"https://rochefort8.github.io/p/%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F/","title":"ブログはじめてみました"},{"content":"要旨 構造化プログラミングは、もともとは、プログラムの正しさをカンタンに確かめることができるように提唱されたものだ 今では、そのときに定義された条件分岐やサブルーチンなどを使うこと自体が構造化プログラミングと呼ぶようになった プログラムをわかりやすくする、という点で、構造化プログラミングは必要だ しかし、それは「高品質なプログラミング」の一部の要素であって、十分条件ではない 解説 1969 年に、ソフトウェア工学ではしばしば名前の出てくるDikstra さんが提唱したもの。\n元の目的は、プログラムの正確さをより簡単に測るための見やすさ向上、なんですね（知らなかった）。\nそして今では、プログラミングの基本要素となっている。ここに詳しい。\nこの原理で言っているのは、その、構造化プログラミングができたからといって、それが高品質なソフトウェアとては言えない、ということ。\nそりゃそうですね。よくある、\n必要条件だが、十分条件ではない\nという事項の一つ。\n","date":"2020-05-27T00:00:00Z","permalink":"https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86100/","title":"ソフトウェア開発201の鉄則 原理100"},{"content":"要旨 デバッグやリグレッションテスト、確認のための単体テストといったもの以外の、本格的なテストをソフトウェア開発者は自分で行ってはならない テストというのは、バグが見つかって欲しくないと願う開発者に対し、バグを見つける、という行為なので、自分で行ったら正しくできるはずもないからだ そして、テスト担当者は、発見したバグを皆の前にさらして、開発者の面子を潰すようなことをしてはならない テスティングというのは、バグがでないことを期待する開発者に対し、精神的に追い打ちをかけるような仕事であることを開発者もテスターも認識しよう 解説 こう書いてあると、そっか、自分じゃやっちゃいけないのか、と思うだろう。\n自分でやるべきテストも、ある。それは、自分が設計・実装した機能が基本たたしく動作するかを確認するための単体テスト、それと、バグを修正した時、本当にちゃんと修正されているか、別のバグを発生させていないか、を確認するリグレッションテスト。\nこれは、ソフトウェア開発者が「自分が正しい仕事ができたのか」を確認するためのものなのだから、それは、自分でやろう。\nそれ以降の本格的なテスティング、ストレステストとか統合テストとか、ロングランとか。\nテスティングというのは、バグがないことを示すためにやるのでは、「ない」。\n全く逆で、「バグを見つけるために」やるものである。\n一方で、ソフトウェア開発者は、決して、自分が開発したものにバグがあることを望んだりは、しないだろう。\nそのような、自分が作ったものに対して、出てくることを望まないバグを見つける。それがテスティング。\n自分でできるわけが、ない。\nどうしても、自分でやると、甘〜〜くなるだろう。本格的にテストしているようで、どうしても特定の優しい状況を作り出して実行していることが往々にある。\n十分確認した、と自信満々で持ち込んで、テスターに一撃でバグを見つけられた、という経験は、誰しもお持ちだろう。\n「バグがない」というのは、開発者にとって、成果を出した証。\n「バグを見つけた」というのは、テスターにとって、成果を出した証。\nお互いの仕事を尊重して、仲良くやりましょう。\n","date":"2020-05-24T00:00:00Z","permalink":"https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86109/","title":"ソフトウェア開発201の鉄則 原理109"},{"content":"要旨 ソフトウェアで最もコストがかかる工程は、「保守」である なので、保守が容易となるように設計をせよ その方法に、一般的なものはない 例えば、基本構造の選択時に、アルゴリズムやコードの選択よりも保守性を重視する、といったことが挙げられる 解説 ソフトウェア「以外の」製品、要するにハードウェアは、設計後最も費用がかかるのは、「生産」。なので、ハードウェア設計の際に一番考慮しなくてはならないのは、生産性。\nソフトウェアの場合、生産にはほとんど費用がかからない場合が多い。その代わり、保守、運用に費用がかかる。なので、ソフトウェア設計の際に一番考慮しなくてはならないのは、保守・運用。\n生存期間が短いプロトタイプはともかく、製品に組み込まれるソフトウェア、サービスを支えるソフトウェアは、出荷・リリースしてからが本番が始まる。\n売れる、流行るものほど、ここから先の保守・運用が長い。一つのプロジェクトでトータルでかかった費用のうち、９割以上が保守・運用というデータもある。\n設計・実装のフェーズで保守・運用のことを最大限に考慮しなくてはならないのは、当然のことなのだ。\n「保守・運用のための設計」は、一意ではない。保守を容易にするには、総合て的なアプローチが必要だ。\n最適な基本構造の選択、アルゴリズム、データ構造の選択。\n「コーディングの原理」にも上がっている鉄則「読みやすい・わかりやすいコード作成」。\nドキュメントをきちんと残すこと。\nこういった行動の集合体が、保守性を容易にするアプローチだろう。\n","date":"2020-05-23T00:00:00Z","permalink":"https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8675/","title":"ソフトウェア開発201の鉄則 原理75"}]
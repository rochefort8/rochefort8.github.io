<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ソフトウェア開発 201の鉄則 on おぎくんチャンネル</title>
        <link>https://rochefort8.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-201%E3%81%AE%E9%89%84%E5%89%87/</link>
        <description>Recent content in ソフトウェア開発 201の鉄則 on おぎくんチャンネル</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <copyright>Yuji Ogihara</copyright>
        <lastBuildDate>Sat, 21 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://rochefort8.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-201%E3%81%AE%E9%89%84%E5%89%87/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ソフトウェア開発201の鉄則 原理44</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8644/</link>
        <pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8644/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要求仕様書の各項目は「階層構造で」記述・管理しよう&lt;/li&gt;
&lt;li&gt;そして、その最も小さい項目「最小の要求」が明らかになるようにしよう&lt;/li&gt;
&lt;li&gt;そうすることにより、機能の実現性、拡張性、柔軟性が大きく向上し、ソフトウェア開発のすべてのプロセスにおいて効率的にコトを進めることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「個々の要求を明確し、上手に分類しよう」ということに尽きる。&lt;/p&gt;
&lt;p&gt;「大項目」「中項目」「小項目」の三段階くらいがあれば十分。これまでの経験では、大抵は「二段階」で済む。&lt;/p&gt;
&lt;p&gt;こうすると、大項目に優先度がついて管理されていれば、必然的にサブセットの優先度が明らかになる。さらに、各サブセットの進行状況がわかれば、大項目の進捗状況が明らかになる。&lt;/p&gt;
&lt;p&gt;その上で、予算や期限上割愛しなくてはならない機能は、その優先度を見ればすぐにわかるようになる。&lt;/p&gt;
&lt;p&gt;「要求の段階で整理しておく」ことは、全工程に役立つことなのだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理28</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8628/</link>
        <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8628/</guid>
        <description>&lt;h2 id=&#34;要約&#34;&gt;要約&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「形式的手法」は、数理論理学に基づく科学的な裏付けをもとにソフトウェア開発を行う手法である&lt;/li&gt;
&lt;li&gt;「形式的手法」は難解なものだが、高品質を達成するには必要なものである&lt;/li&gt;
&lt;li&gt;仕様書を最初は「自然言語」で書き、その後形式的手法を用いて書いてみることにより、仕様に潜む問題の発見に役立つかも知れない、といった使い方が効率的である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「形式的手法って何？」という人がほとんどだろう。定義は以下のようなものらしい。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;形式手法は、システム、特に、ソフトウェアの開発法であって、数理論理学に基づく科学的な裏付けを持つ。明確で厳密な意味を持つ言語を用いて設計対象を表現することにより、設計記述の正しさを系統的に示すことが可能になる。したがって、開発したシステム、あるいは、ソフトウェアが高い信頼性を持つことを保証することができる。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;難しいことを言うなぁ。おそらく「学術的手法」「論理的手法」といった方がピンとくるかも知れない。
ソフトウェアの開発の一つ一つの工程において、曖昧さを排除して間違いが起きる可能性が限りなく少ない言語や環境を使って、論理的に正しく開発進めることによって、結果出来上がる成果物の品質は必然と高くなる、と考えていいかも知れない。&lt;/p&gt;
&lt;p&gt;これは、「論理的手法」vs「実践的手法」に結果帰着する話で、研究者 vs 現場　といった図式にも近いかも知れない。&lt;/p&gt;
&lt;p&gt;あんまりこの手法のことを考えたり経験があったりしたわけではないので、直感的な個人の感想になる。&lt;/p&gt;
&lt;p&gt;今の時代のソフトウェア開発は、「形式的手法」「実践的手法」に重きを置いているんじゃなかろうか。
それは、アジャイル開発の定着、CI/CDといったツールの発達で、「間違っても速やかに発見できて修正しやすい環境が整っている」からであり、それなら、考えて論理的にアプローチするよりも、開発-&amp;gt;修正を何度も繰り返した方が結果、高い品質を得られる、と言う考えで動いているように思う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://qiita.com/autotaker1984/items/52cd65486a3186af080b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;形式手法はなぜ流行っていないのか&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://swet.dena.com/entry/2020/04/08/140500&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ゼロから学んだ形式手法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://formal.mri.co.jp/db/fmcategory/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;形式手法の実践ポータル&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この辺りが参考情報。  多くの実践例があるが、どれも「ちょっとした失敗でさえ許されない」重厚長大なシステムばっかりのようだ。アジャイルではなくウォーターフォール型の開発で進めていそうな、このような分野なら形式的手法は役立つかもしれない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>「ソフトウェア開発 201の鉄則」の各鉄則を４行でまとめてみる</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-201%E3%81%AE%E9%89%84%E5%89%87%E3%81%AE%E5%90%84%E9%89%84%E5%89%87%E3%82%92%EF%BC%94%E8%A1%8C%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B/</link>
        <pubDate>Sun, 15 Oct 2023 07:28:21 +0900</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA-201%E3%81%AE%E9%89%84%E5%89%87%E3%81%AE%E5%90%84%E9%89%84%E5%89%87%E3%82%92%EF%BC%94%E8%A1%8C%E3%81%A7%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B/</guid>
        <description>&lt;p&gt;ソフトウェア開発のバイブルと言える名著「ソフトウェア開発　２０１の鉄則」。30年以上のソフトウェア工学の知見をもとに出版。そして、その後著しく進化した現代でも全く色あせないそれぞれの教訓を、現代のソフトウェア開発のトレンドに照らし合わせながら「４行で」言い表してみることにする。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理100</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86100/</link>
        <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86100/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;構造化プログラミングは、もともとは、プログラムの正しさをカンタンに確かめることができるように提唱されたものだ&lt;/li&gt;
&lt;li&gt;今では、そのときに定義された条件分岐やサブルーチンなどを使うこと自体が構造化プログラミングと呼ぶようになった&lt;/li&gt;
&lt;li&gt;プログラムをわかりやすくする、という点で、構造化プログラミングは必要だ&lt;/li&gt;
&lt;li&gt;しかし、それは「高品質なプログラミング」の一部の要素であって、十分条件ではない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;1969 年に、ソフトウェア工学ではしばしば名前の出てくるDikstra さんが提唱したもの。&lt;/p&gt;
&lt;p&gt;元の目的は、プログラムの正確さをより簡単に測るための見やすさ向上、なんですね（知らなかった）。&lt;/p&gt;
&lt;p&gt;そして今では、プログラミングの基本要素となっている。&lt;a class=&#34;link&#34; href=&#34;https://itmanabi.com/structured-objectoriented-prog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ここに詳しい&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;この原理で言っているのは、その、構造化プログラミングができたからといって、それが高品質なソフトウェアとては言えない、ということ。&lt;/p&gt;
&lt;p&gt;そりゃそうですね。よくある、&lt;/p&gt;
&lt;p&gt;必要条件だが、十分条件ではない&lt;/p&gt;
&lt;p&gt;という事項の一つ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理109</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86109/</link>
        <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86109/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デバッグやリグレッションテスト、確認のための単体テストといったもの以外の、本格的なテストをソフトウェア開発者は自分で行ってはならない&lt;/li&gt;
&lt;li&gt;テストというのは、バグが見つかって欲しくないと願う開発者に対し、バグを見つける、という行為なので、自分で行ったら正しくできるはずもないからだ&lt;/li&gt;
&lt;li&gt;そして、テスト担当者は、発見したバグを皆の前にさらして、開発者の面子を潰すようなことをしてはならない&lt;/li&gt;
&lt;li&gt;テスティングというのは、バグがでないことを期待する開発者に対し、精神的に追い打ちをかけるような仕事であることを開発者もテスターも認識しよう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;こう書いてあると、そっか、自分じゃやっちゃいけないのか、と思うだろう。&lt;/p&gt;
&lt;p&gt;自分でやるべきテストも、ある。それは、自分が設計・実装した機能が基本たたしく動作するかを確認するための単体テスト、それと、バグを修正した時、本当にちゃんと修正されているか、別のバグを発生させていないか、を確認するリグレッションテスト。&lt;/p&gt;
&lt;p&gt;これは、ソフトウェア開発者が「自分が正しい仕事ができたのか」を確認するためのものなのだから、それは、自分でやろう。&lt;/p&gt;
&lt;p&gt;それ以降の本格的なテスティング、ストレステストとか統合テストとか、ロングランとか。&lt;/p&gt;
&lt;p&gt;テスティングというのは、バグがないことを示すためにやるのでは、「ない」。&lt;/p&gt;
&lt;p&gt;全く逆で、「バグを見つけるために」やるものである。&lt;/p&gt;
&lt;p&gt;一方で、ソフトウェア開発者は、決して、自分が開発したものにバグがあることを望んだりは、しないだろう。&lt;/p&gt;
&lt;p&gt;そのような、自分が作ったものに対して、出てくることを望まないバグを見つける。それがテスティング。&lt;/p&gt;
&lt;p&gt;自分でできるわけが、ない。&lt;/p&gt;
&lt;p&gt;どうしても、自分でやると、甘〜〜くなるだろう。本格的にテストしているようで、どうしても特定の優しい状況を作り出して実行していることが往々にある。&lt;/p&gt;
&lt;p&gt;十分確認した、と自信満々で持ち込んで、テスターに一撃でバグを見つけられた、という経験は、誰しもお持ちだろう。&lt;/p&gt;
&lt;p&gt;「バグがない」というのは、開発者にとって、成果を出した証。&lt;/p&gt;
&lt;p&gt;「バグを見つけた」というのは、テスターにとって、成果を出した証。&lt;/p&gt;
&lt;p&gt;お互いの仕事を尊重して、仲良くやりましょう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理75</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8675/</link>
        <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8675/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアで最もコストがかかる工程は、「保守」である&lt;/li&gt;
&lt;li&gt;なので、保守が容易となるように設計をせよ&lt;/li&gt;
&lt;li&gt;その方法に、一般的なものはない&lt;/li&gt;
&lt;li&gt;例えば、基本構造の選択時に、アルゴリズムやコードの選択よりも保守性を重視する、といったことが挙げられる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ソフトウェア「以外の」製品、要するにハードウェアは、設計後最も費用がかかるのは、「生産」。なので、ハードウェア設計の際に一番考慮しなくてはならないのは、生産性。&lt;/p&gt;
&lt;p&gt;ソフトウェアの場合、生産にはほとんど費用がかからない場合が多い。その代わり、保守、運用に費用がかかる。なので、ソフトウェア設計の際に一番考慮しなくてはならないのは、保守・運用。&lt;/p&gt;
&lt;p&gt;生存期間が短いプロトタイプはともかく、製品に組み込まれるソフトウェア、サービスを支えるソフトウェアは、出荷・リリースしてからが本番が始まる。&lt;/p&gt;
&lt;p&gt;売れる、流行るものほど、ここから先の保守・運用が長い。一つのプロジェクトでトータルでかかった費用のうち、９割以上が保守・運用というデータもある。&lt;/p&gt;
&lt;p&gt;設計・実装のフェーズで保守・運用のことを最大限に考慮しなくてはならないのは、当然のことなのだ。&lt;/p&gt;
&lt;p&gt;「保守・運用のための設計」は、一意ではない。保守を容易にするには、総合て的なアプローチが必要だ。&lt;/p&gt;
&lt;p&gt;最適な基本構造の選択、アルゴリズム、データ構造の選択。&lt;/p&gt;
&lt;p&gt;「コーディングの原理」にも上がっている鉄則「読みやすい・わかりやすいコード作成」。&lt;/p&gt;
&lt;p&gt;ドキュメントをきちんと残すこと。&lt;/p&gt;
&lt;p&gt;こういった行動の集合体が、保守性を容易にするアプローチだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理126</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86126/</link>
        <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86126/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理76</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8676/</link>
        <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8676/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理147</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86147/</link>
        <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86147/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理114</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86114/</link>
        <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86114/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理125</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86125/</link>
        <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86125/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理185</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86185/</link>
        <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86185/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理138</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86138/</link>
        <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86138/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理111</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86111/</link>
        <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86111/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理129</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86129/</link>
        <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86129/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理128</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86128/</link>
        <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86128/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理92</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8692/</link>
        <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8692/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理107</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86107/</link>
        <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86107/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理94</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8694/</link>
        <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8694/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理52</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8652/</link>
        <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8652/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理65</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8665/</link>
        <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8665/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理134</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86134/</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86134/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理51</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8651/</link>
        <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8651/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理95</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8695/</link>
        <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8695/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理50</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8650/</link>
        <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8650/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理105</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86105/</link>
        <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86105/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理43</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8643/</link>
        <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8643/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要件は、いくつもの活動が積み増さなって決定されるものだ&lt;/li&gt;
&lt;li&gt;そのようないくつもの活動と、その結果を、一つの要件の背景として記録すること&lt;/li&gt;
&lt;li&gt;後に要件変更が発生した時に、その要件を決定するに至った過程と整合性をとルためである&lt;/li&gt;
&lt;li&gt;決定のために参照した文献へのポインタ、議論の議事録といったものを記録すること。これが、一つの「進化する」要件のために必要な活動である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「あれ、これ、誰が決めたんだけ？」と後から首を捻る要件、ありますね。&lt;/p&gt;
&lt;p&gt;この原理の「要求」の項目にいくつも記述があるが、要求は、難しいものである。一つの要求を決めるのに、たくさんの活動とたくさんの決定を要するものだ。&lt;/p&gt;
&lt;p&gt;ヒアリング、議論、調査、アンケート、プロトタイプ。様々な活動から導き出されるものである。&lt;/p&gt;
&lt;p&gt;それぞれの結果は、矛盾するものもあるだろう。&lt;/p&gt;
&lt;p&gt;「起動時間がX秒以内であること」その以内が必要という意見と、いや、そのための実装なら他の機能が必要という意見。その度に、なんらかの理由をつけて、いったんその時点での最新の仮決定をするはずだ。&lt;/p&gt;
&lt;p&gt;そんなことの繰り返しだから、きっと、そんな理由、後にきっと、忘れるだろう。&lt;/p&gt;
&lt;p&gt;なので、その一つ一つに、どこで、誰が、どのような過程を経て決めたのか、を記録しておこう、ということ。&lt;/p&gt;
&lt;p&gt;要件を決めるのに一番大事なのは、「決める」ことだ。大体、決まらない。&lt;/p&gt;
&lt;p&gt;あまりいい言い方ではないが、「強引でもいいから、決める」姿勢の方がいいように思う。その決定が全て仮決定で、のちの議論で変更してもいい、という前提で。&lt;/p&gt;
&lt;p&gt;決まっていない、より、仮ですが、こうしています、といった方が、のちの活動がずっと進むはずだ。&lt;/p&gt;
&lt;p&gt;そして、その時に、その「仮」をどうやって決めたか、が添えられていると、その一つ一つの仮の意味合いが増し、より効果的だろう。&lt;/p&gt;
&lt;p&gt;なお、よくこの手で、「上役に決める」というケースがある。社長のツルの一言、といったもの。&lt;/p&gt;
&lt;p&gt;この手は、要件活動の最初からツルの一言があるのであれば、仕方ない。最初からそれは割り切って進めればいいので。&lt;/p&gt;
&lt;p&gt;散々議論やプロトを繰り返して、最終段で上長がそれを覆すようであれば、そんなプロジェクトは、抜けた方がいい。上長のために開発やってるんじゃないから、ネ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理42</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8642/</link>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8642/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ユーザ・インターフェイス(UI) の要件具体化には、プロトタイプが最適だ&lt;/li&gt;
&lt;li&gt;実際にプログラムを書かなくとも、画面遷移だけ示すだけで充分。「電子紙芝居」を作って見せよう&lt;/li&gt;
&lt;li&gt;これは、要求を明らかにすることに加え、顧客、ユーザへのアピールにも役立つ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ユーザ・インタフェースは「見えるもの」だ。なので、「見せよう」。そういう話と考えれば、いい。&lt;/p&gt;
&lt;p&gt;描画ツール、レイアウト作成のツールは無数にある。PowerPoint でも充分だろう。&lt;/p&gt;
&lt;p&gt;モバイルアプリを作ったときは、ユーザ・インタフェースと、アプリがどんなものかを示すために、画面は適当にそれっぽいのをネットで拾って、アプリでボタンだけ実装して画面遷移するアプリを2時間くらいで作った。そんなので、充分。&lt;/p&gt;
&lt;p&gt;ユーザ・インタフェースに限らず、要求フェーズでは、いや、要求フェーズでなくても全般的に、「見える化」は重要で大きな役割を果たす、ということだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理101</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86101/</link>
        <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86101/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理41</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8641/</link>
        <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8641/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要求仕様の誤りは、発見するのが遅れれば遅れるほど、高い代償を払うことになる&lt;/li&gt;
&lt;li&gt;誤りが設計段階まで残っていたら、それを修正するのに5倍のコスト、コーディングまで残っていたら10倍、テスティングまで残っていたら20倍、、といった具合&lt;/li&gt;
&lt;li&gt;なので、気づいたら、先送りせず、今すぐ修正にかかれ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;問題は、仮にそれが軽微なものだったとしても、先送りすればするほど、大ごとになる可能性が高い。&lt;/p&gt;
&lt;p&gt;ソフトウェアの開発でも、同じこと。工程の後のほうで判明したら、その前の、前の前の工程からやりなおさなべればならない。&lt;/p&gt;
&lt;p&gt;特に、リリース後だと、悲惨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常業務を止める&lt;/li&gt;
&lt;li&gt;そのための社内がの調整を行う&lt;/li&gt;
&lt;li&gt;対応のための人材を確保する&lt;/li&gt;
&lt;li&gt;場合によっては、他のタスクを止めて修復を行う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もう、何倍なんて計算ができるレベルじゃない。&lt;/p&gt;
&lt;p&gt;と、「いますぐ直す」べき理由は、いくらでも言える。&lt;/p&gt;
&lt;p&gt;のに、誤りがあったり、要求仕様がよくわからなにのに設計やコーディングに進んでしまう場合が、多い。&lt;/p&gt;
&lt;p&gt;こういうときに、一瞬「出戻り」のようにみえてしまう「立ち止まる」ということが、できるか、が、いいプロジェクトチームであるかの試金石かもしれない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理36</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8636/</link>
        <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8636/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアの研究成果で、実際に役に立ったのは、ごくわずかなのが現実だ&lt;/li&gt;
&lt;li&gt;うまくいかないのは、研究者が経験がないとか、研究者と開発者で使う語彙が違うといったことに起因する&lt;/li&gt;
&lt;li&gt;研究から現場への技術移転で成功した事例は、研究開始の当初から現場と密な連携から生まれている&lt;/li&gt;
&lt;li&gt;現場は、研究のアイディアを、完成してからでなく、途中で確かめるためのもの、とくらいに考えるとうまくいくだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ソフトウェアに限らず、工学の分野は、上流から&lt;/p&gt;
&lt;p&gt;研究⇒開発⇒事業⇒保守・運用&lt;/p&gt;
&lt;p&gt;と進む。この原理は、研究と現場、という記述だが、異なるフェーズ間のやりとりにも、あてはまる。&lt;/p&gt;
&lt;p&gt;開発が終わってから、さて移管、と事業所に持っていっても、うまくいかない。&lt;/p&gt;
&lt;p&gt;実は、そんなん、当たり前なのだ。&lt;/p&gt;
&lt;p&gt;「研究」「開発」「事業」&amp;hellip; それぞれのフェーズで、目指すもの、携わっている人、役割、すべて、そもそも違う。&lt;/p&gt;
&lt;p&gt;その違いを理解せず、考慮しないで、出来るわけが、ない。&lt;/p&gt;
&lt;p&gt;なので、それを解決するためには、結局、これまで言われている、２つのこと、「コミュニケーション」「イテレーティブ開発」が施策として当てはまる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;異なるフェーズ間で密な連携をとろう&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;短いサイクルで成果を確かめながら進化しよう&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;どのフェーズでも、どの相手でも一般的に通じる原理だろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理37</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8637/</link>
        <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8637/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工学分野では、設計が失敗したときは技術者が避難される&lt;/li&gt;
&lt;li&gt;が、ソフトウェア工学の分野では、めったに開発者は避難されない&lt;/li&gt;
&lt;li&gt;技術者としての責任範囲を全うすること&lt;/li&gt;
&lt;li&gt;採用した手法、管理者、日程のせいにしてはいけない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「ソフトウェア工学の分野では、めったに開発者は避難されない」&lt;/p&gt;
&lt;p&gt;ホンマかなぁ。マネージャがマネジメントとしての責任を全うせずに、技術者のせいにするシーン、たくさん見かけたけどなぁ。&lt;/p&gt;
&lt;p&gt;ちなみに、良く言われる原則。&lt;/p&gt;
&lt;p&gt;うまくいかなかったときは、最大の要因は、「技術」では「まず、ない」。&lt;/p&gt;
&lt;p&gt;大抵は、まずい管理に起因するものだ。&lt;/p&gt;
&lt;p&gt;かといって、開発者に責任範囲がないわけでは、決して、ない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日程やリソースに問題があったら、きちんとエスカレーションする。&lt;/li&gt;
&lt;li&gt;与えられたリソースで、正しい手法、高い技術力をいかんなく発揮して最大の成果を出すよう努力する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それは、開発者の責任だ。これが出来ずに、環境や管理者のせいにするのなら、最初から何もやらんほうがいい。&lt;/p&gt;
&lt;p&gt;逆に、ここまでやって、それでもうまくいかなかったときは、堂々と人のせいにしていい。&lt;/p&gt;
&lt;p&gt;日本人はどうしても、自分の責任として抱え込むのが美徳で、人のせいにすること自体が恥ずべきことだ、という感覚がある。&lt;/p&gt;
&lt;p&gt;自分が責任を全うしたなら、他人の責任までしょい込む必要はない、。&lt;/p&gt;
&lt;p&gt;そのかわり、繰り返すが、技術者としての自分の責任は果たそう。ベストを尽くそう。それだけ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理35</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8635/</link>
        <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8635/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同じ概念、同じ意味を表す言葉は、常に同じものを使うべきである&lt;/li&gt;
&lt;li&gt;文章構造もしかり。同じ表現には同じ構造を用いるべき&lt;/li&gt;
&lt;li&gt;例えば、「2つのタイプ」と書いたあとに、「4つの形」と書くのではなく、4つの「タイプ」と書くべきである&lt;/li&gt;
&lt;li&gt;要求仕様書、設計文書、コメントといったすべての文書にこれを適用すべきである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ダメな例、ここにあります（苦笑&lt;/p&gt;
&lt;p&gt;このシリーズ、ソフトウェア開発者といったり、技術者といったり、エンジニアといったりしている。&lt;/p&gt;
&lt;p&gt;違うものを指すののであれば仕方ないが、そうでないのなら、どれかに統一すべきである。&lt;/p&gt;
&lt;p&gt;小説ならともかく、技術文書は、たしかに、そうあるべきだ。語句が違うと、「え？意味違うの」と思うかもしれない。それに、なにより混乱する。&lt;/p&gt;
&lt;p&gt;そんなコストを読み手にかけさせては、ならない。これが、ユーザマニュアルやチュートリアルだと、顧客が離れていくかもしれない。それくらいの大事な話である。&lt;/p&gt;
&lt;p&gt;とはいえ、これ、かなり難しい。なんで語句がバラバラになるんやろか。&lt;/p&gt;
&lt;p&gt;執筆の途中で、使っている語句、あるいはこれから使う語句を洗い出して整理する、ということを、こまめに、やらないとならないのだろう。きっと。&lt;/p&gt;
&lt;p&gt;このシリーズ、そのうちに読み直します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理34</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8634/</link>
        <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8634/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ドキュメントには、文中に使用されている用語と、それらが使われている場所を示すリストである「索引」が必要である&lt;/li&gt;
&lt;li&gt;読み手からしたら当然だが、作成者はそのことを忘れがちである&lt;/li&gt;
&lt;li&gt;ドキュメント中の情報の素早い検索、後の保守運用には索引は必須である&lt;/li&gt;
&lt;li&gt;文章作成ツールの索引作成機能を有効に活用しよう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;原理33「どの文書にも用語集が必要だ」と、言いたいことは一緒だろう。&lt;/p&gt;
&lt;p&gt;読み手のことを考えて文書を作成しよう。&lt;/p&gt;
&lt;p&gt;実は一度も自分が作成したドキュメントの索引を作成したことは、ないが。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理33</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8633/</link>
        <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8633/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア工学の世界には、すぐに理解できない、専門用語がたくさんある&lt;/li&gt;
&lt;li&gt;そのような専門用語の解説がある「用語集」を必ず文書に儲けよう&lt;/li&gt;
&lt;li&gt;用語の定義は、「調べる手間を最小」とするように書くべきである&lt;/li&gt;
&lt;li&gt;「可能な限り一般用語を使う」「説明が必要な用語は文中でイタリック体で示す」といったことが挙げられる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;文書に限った話ではない。他の工学の分野と同様、ソフトウェアの世界にも、その世界に精通しているものだけがわかる用語が、たくさんある。&lt;/p&gt;
&lt;p&gt;そして、すごい勢いで進化している世界なので、次々と新しい用語、もっというと、同じ概念を言い換えただけの新しい言葉が、次々と出てくる。&lt;/p&gt;
&lt;p&gt;出てくること自体は、工学といった専門分野、そして急速な勢いで進化している分野であるソフトウェアの世界の宿命といっていい。&lt;/p&gt;
&lt;p&gt;では、このような専門用語を、どう扱うか。&lt;/p&gt;
&lt;p&gt;大抵のソフトウェア用語用語がわかる専門家が、それがわからない相手に対して始めるのは、「解説」ではなかろうか。その意味を丁寧に説明し始めて、それで親切心を発揮している、と思っているエンジニア、多いだろう。&lt;/p&gt;
&lt;p&gt;違う。&lt;/p&gt;
&lt;p&gt;まず先にやるべきは、&lt;/p&gt;
&lt;p&gt;「そんな用語を使わずとも一般用語、相手に通じる用語を使うことを考える」&lt;/p&gt;
&lt;p&gt;だろう。&lt;/p&gt;
&lt;p&gt;もっとも、一言で一般用語で置き換える説明するのが難しいものも、あるだろう。そういう時は、簡潔に、例えで「要は、XXX の世界のYYYのようなもの」と言えれると、相手に伝わりやすい。&lt;/p&gt;
&lt;p&gt;とにかく、「相手にわかる」ということを優先させよう。&lt;/p&gt;
&lt;p&gt;そのマインドさえ持っていれば、この原理で言っていることは、わかるだろう。&lt;/p&gt;
&lt;p&gt;まず、必要のない専門用語を使わない。その上で、どうしても解説が必要な用語は、そうだとわかるようにしておく。その上で、文書の最後に丁寧な解説をつける。&lt;/p&gt;
&lt;p&gt;実際にそこまで出来るかは、費やせる工数次第だが、意識だけは、しておこう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理32</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8632/</link>
        <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8632/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文章化（ドキュメント）には規格がある。&lt;/li&gt;
&lt;li&gt;その規格は、体型だった、組織だった文章作成のガイドラインを提供している&lt;/li&gt;
&lt;li&gt;そのガイドラインを使用し、その上で独自の記述を行え&lt;/li&gt;
&lt;li&gt;規格には、「明快な文章で書く」「文章階層の定義」と言ったものが含まれる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;このようなものを指すのだろうか。&lt;/p&gt;
&lt;p&gt;Systems and software engineering — Requirements for designers and developers of user documentation&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.iso.org/standard/43073.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.iso.org/standard/43073.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JIS だと、こちら。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://kikakurui.com/x0/X0153-2015-01.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JIS X 0153:2015 システム及びソフトウェア技術−利用者用文書類の設計者及び作成者のための要求事項&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ドキュメントはとっても大事だ。その存在は、継続的な開発にとってカギだと言っても、良い。&lt;/p&gt;
&lt;p&gt;なぜなら、開発者、担当者は必ず変わるから。知見・ノウハウの蓄積・伝授ができるのはつまるところ、ドキュメントしか、ない。&lt;/p&gt;
&lt;p&gt;なのに、文章化、ドキュメント作成は、後回しにされがちである。まぁそりゃそうだろう。開発者はソフトウェアを作ることで手一杯。そして、得てして文章は苦手。そして開発が終わったら、ドキュメントのことなぞすっかり忘れる。この繰り返しだろう。&lt;/p&gt;
&lt;p&gt;本質的には、ソフトウェア開発のプロジェクトで、文章化を進める、という認識をするのであれば、専任者を確保すべきだろう。開発者が片手間でやるものでは、ない。&lt;/p&gt;
&lt;p&gt;とはいえ、ソフトウェア開発者も、文章化は、本格的でなくとも、やるべきである。そして、その文章化の敷居を下げる、より楽にやるために、本原理の「規格を使え」を考えると、わかりやすいだろう。もっと優しくいうと、「テンプレートに沿って」ということになろうか。&lt;/p&gt;
&lt;p&gt;と、ダラダラ書いたが、実は筆者もドキュメント作成は苦手なのである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理31</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8631/</link>
        <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8631/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアの技術は急速に進化し続けるものである&lt;/li&gt;
&lt;li&gt;一つの大きな流行りが5年程度、さらにその良いところを取り入れた発展形のはやりが続く、といった具合で進化していく&lt;/li&gt;
&lt;li&gt;この進化についていくための有効な方法として、「適切な書籍・情報源からの情報収集」「適切な人との会話」｢学会への参加｣がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;自分のレベルアップのためには、最新技術の知見獲得・習得は必要不可欠だ。これは自明。&lt;/p&gt;
&lt;p&gt;しかし、それにしても、進化が早い。この原理に書いてあるくらいなのだから、今に始まった話ではなく、30年以上前から早かった、ということに驚きを感じる。&lt;/p&gt;
&lt;p&gt;そして、それについていくのは、大変だ。常に勉強していないとならない。一年たったらちょっと前に流行った内容なんて陳腐化するかもしれない。そういう世界だ。&lt;/p&gt;
&lt;p&gt;幸いにして、今はよい情報源がたくさんある。むしろ、ありすぎて、良い情報源かどうかを見極めるのがカギのように思う。&lt;/p&gt;
&lt;p&gt;この原理に書いてあって、いまでも有効な方法は、「出来る人と会話する」だろう。これが一番有効。&lt;/p&gt;
&lt;p&gt;熟練者、ベテランは有効活用するものなので、ある。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理30</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8630/</link>
        <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8630/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新しい、流行りの技術や手法は、どんな場合にでも有効では、ない。&lt;/li&gt;
&lt;li&gt;多くのプロジェクトで使用されているからといって、自分の環境でもうまくいくことが保証されているわけでは、ない&lt;/li&gt;
&lt;li&gt;なので、費用対効果、リスクについて自分の環境で現実的に考え評価してから使え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;Twitter をはじめとした、強力な拡散力のあるSNSがある時代、「みんなが使っている」 「多くの人がいい、と言っている」といった流行にますます影響されやすくなっている。&lt;/p&gt;
&lt;p&gt;莫大な費用をかけた宣伝ではなく、実際に使用した感を伝えた口コミ、影響力も大きければ、案外信用度も高いものだ。&lt;/p&gt;
&lt;p&gt;なので、それを「お、ええやん」と思うのは、いい。&lt;/p&gt;
&lt;p&gt;ただ、「盲目的に信じるな」ということ、この点だけは、決して忘れては、ならない。&lt;/p&gt;
&lt;p&gt;自分の環境に合うのか、本当に効果があるのか、はきちんと見極めよう。&lt;/p&gt;
&lt;p&gt;たとえば、大規模プロジェクト向きの手法、ツールは、本当に個人開発が中心の貴方に合うか？&lt;/p&gt;
&lt;p&gt;仮にあったとしても購入できないかもしれない。無理に購入したとして、それに見合う効果は得られるのか？&lt;/p&gt;
&lt;p&gt;そういう熟慮が必要ですよ、というのがこの原理。&lt;/p&gt;
&lt;p&gt;銀の弾丸などは、存在し得ない、のである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理29</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8629/</link>
        <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8629/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアの不具合、バグや成果物のエラーが発見されたときは、担当の開発者は「感謝すべき」である&lt;/li&gt;
&lt;li&gt;技術的なエラーは隠すのではなく、逆に広く公開すべきである&lt;/li&gt;
&lt;li&gt;エラーを知らしめることは、他の技術者の同様のエラー発生を防ぐ、エラーから知見が得られるといったメリットがある&lt;/li&gt;
&lt;li&gt;なので、組織は、エラーを発生させた開発者を責めるのではなく、相応の評価をしなさい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;要旨の最後の文章に相当することは、原理には書いていない。きっとこういうことだろう、という私見。&lt;/p&gt;
&lt;p&gt;前半に、日本のソフトウェアベンダーでの不具合の扱いについて書いてある。日本だと、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアのエラーは「恥ずべきもの」と組織はとらえる&lt;/li&gt;
&lt;li&gt;なので、技術者にとっても「恥ずべき」ことである&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というふうにとらえている。と。確かに。&lt;/p&gt;
&lt;p&gt;ソフトウェアの不具合に限らず、日本人は、一般的な傾向として、失敗を後ろ向きにとらえがちである。&lt;/p&gt;
&lt;p&gt;失敗は恥、なので、このようなことが発生しては決してならない&lt;/p&gt;
&lt;p&gt;武士道をへんてこりんに解釈したこんなスタンスがまかり通っているように、思う。&lt;/p&gt;
&lt;p&gt;なので、たしかに、不具合発生部分を担当した開発者は、そのことを恥ずかしいと思い、管理者や組織も、きっとそのことに対してマイナスに評価するだろう。&lt;/p&gt;
&lt;p&gt;なので、軽微な、いや、重要なものであっても、不具合がわかったら、それを公にせず隠す、といった行為をとる開発者がでることもあるだろう。&lt;/p&gt;
&lt;p&gt;ある面、タイトル通り、組織と個人のエラーに対するスタンスや評価が「一致している」ことを示している。&lt;/p&gt;
&lt;p&gt;で、ここからが本題。&lt;/p&gt;
&lt;p&gt;失敗は、「恥ずべきもの」でなく「感謝すべきもの」ととらえて、「受け入れる」これが正しい姿であろう。&lt;/p&gt;
&lt;p&gt;人は、必ず、失敗する、ソフトウェア開発でも同じ。重要な部分であればあるほど、担当領域が広いほど、チャレンジすればするほど、エラーが起きる可能性は高くなるものだ。&lt;/p&gt;
&lt;p&gt;同じような間違いを何度も繰り返すのは良くないが、エラーからは、必ず「気づき」がある。振り返って、気づきを得て、それでよし、としよう。&lt;/p&gt;
&lt;p&gt;失敗は成功の母。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理141</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86141/</link>
        <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86141/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理27</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8627/</link>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8627/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア開発者が使う手法・技法は、二次目標に対応した目的がある&lt;/li&gt;
&lt;li&gt;その目標を達成した時点で、その手法・技法はそれ以上は不要なので使うことを止めよう&lt;/li&gt;
&lt;li&gt;目標を忘れて手法・技法にのめりこんだり、手法・技法のために目標が変わるのは本末転倒&lt;/li&gt;
&lt;li&gt;ただ、目標達成時点で止めた残りは、本当にやらなくていいかは、全体を見てから判断しよう、その部分が重要となる局面があるかもしれないので&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;この原理、一つの原理でいろんなことを言いすぎ。上記の要旨の、最後の項目は、一旦忘れよう。&lt;/p&gt;
&lt;p&gt;言いたいのは、「目標達成が最も大事である、そのために技法・手法を使うものだ」それが逆になってはいけない、ということだろう。&lt;/p&gt;
&lt;p&gt;目的と手段が逆転する、ということは、よく起きる。&lt;/p&gt;
&lt;p&gt;なぜだろう。&lt;/p&gt;
&lt;p&gt;ひとつは、この原理で言っているように、目的を達成するための手段を実行していると、その手段に「のめりこむ」というのがあるのだろう。とくに、その手法・技法が優れたもので、大きな効果が期待できそうなものであればあるほど。&lt;/p&gt;
&lt;p&gt;つねに、「何のためにやっているか」は自問自答するようにしよう。そして、狙った通りの目標を達成したら、すぐにきりのよいところで、止めよう。&lt;/p&gt;
&lt;p&gt;「過ぎたるは及ばざるがごとし」なのである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理26</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8626/</link>
        <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8626/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア開発の手法・技法自体の「正しさ」を論じることには意味はない&lt;/li&gt;
&lt;li&gt;どんなによい手法・技法も、それら適したタイミングで使われてこそ、本当に役立つものとなる&lt;/li&gt;
&lt;li&gt;いくつもの多様な手法・技法を知っていて、かつそれらをどのタイミングで使ったらいいかを熟知しているのが、優れた開発者である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「内容」だけでも「やり方」だけでも不十分。優れた内容のものを、適切なやり方で、適切なタイミングで使って、「素晴らしい成果を出す」ことに意味がある。&lt;/p&gt;
&lt;p&gt;よく、「技法自体」や「やり方」で延々とやり合ってるシーンを見かける。大体は、単なる自己主張にしかすぎない。&lt;/p&gt;
&lt;p&gt;「結果を出した」手法・やり方が、優れたものなのだ。そして、手法をうまく、いいタイミングで使いこなせて結果に結びつけられるのが、優れた開発者。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理25</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8625/</link>
        <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8625/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CASE 開発環境は高価だ。導入時に10000ドル/人、年間の運用コストで3,000ドルくらいするだろう&lt;/li&gt;
&lt;li&gt;しかし、ソフトウェア開発では、この費用は必要経費と捉えるべきである&lt;/li&gt;
&lt;li&gt;この必要経費を回収する計画を立てよ&lt;/li&gt;
&lt;li&gt;導入しない場合に発生した、修正、リリース遅れと言ったコストは、導入した場合より、きっと高くつくであろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;CASEツールとは、ソフトウェアの開発の各フェーズのタスクを効率化、自動化するツールや環境のことである。一時期、「統合CASEツール」と言う、工程の最初から最後までを一本化するようなものの実現を目指した時期もあるが、今では、それぞれのプロセスにあったそれぞれのツールの集合体をCASEツール、と呼ぶようだ。&lt;/p&gt;
&lt;p&gt;そして、オープンソースを活用するのが当たり前の現代。とても無償とは思えない立派なツール、開発環境が簡単に入手できる。無償のものだけで、十分開発が務まる分野も多いのではないだろうか。&lt;/p&gt;
&lt;p&gt;高価だったときは、その回収計画が重要だったが、今はむしろ、そのようなことは考えず、パッと導入して、もっといいものがあったら取り換える、と言った感じで、スピード感を持った開発に倒れるを方向だろう。&lt;/p&gt;
&lt;p&gt;最近開発に使ったツール・環境を挙げてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Code&lt;/li&gt;
&lt;li&gt;XCode&lt;/li&gt;
&lt;li&gt;Android Studio&lt;/li&gt;
&lt;li&gt;GCC Toolchain&lt;/li&gt;
&lt;li&gt;gdb&lt;/li&gt;
&lt;li&gt;OpenOCD&lt;/li&gt;
&lt;li&gt;github/gitlab&lt;/li&gt;
&lt;li&gt;Confluence/JIRA&lt;/li&gt;
&lt;li&gt;Redmine&lt;/li&gt;
&lt;li&gt;AWS 各サービス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; ほとんどが無償。AWSは有償だけど、破壊的な安さだし。コストが劇的に安くなったから個人開発がやりやすくなった、と言う側面も、ある。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理24</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8624/</link>
        <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8624/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;優秀なソフトウェア開発者が良いツールを使うと、生産性は大きく高まる&lt;/li&gt;
&lt;li&gt;が、良いツールを使うとソフトウェアが優秀になるわけでは、決してない&lt;/li&gt;
&lt;li&gt;出来のよくないソフトウェア開発者にツールを与えると、出来のよくないソフトウェアを量産しがちなので、かえってたちがわるい&lt;/li&gt;
&lt;li&gt;よって、良いツールは「優秀なソフトウェア開発者だけに」与えよ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;出来悪いソフトウェア開発者が、劇的に出来が良くなるツールがあるんだったら、だれも苦労しないわな。そんなん、あるわけない。&lt;/p&gt;
&lt;p&gt;それはわかってるんだけど、何故かそこを勘違いするケース、良く見るんだな。&lt;/p&gt;
&lt;p&gt;ツールなくても、出来る開発者はできる。その上で、その開発者のためになるいいツールを与える。そしてもっと高い生産性を実現する。&lt;/p&gt;
&lt;p&gt;ツールや環境を配布する相手は、ちゃんと選ぼう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理161</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86161/</link>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86161/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理23</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8623/</link>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8623/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア・ツールは、効率化に有効なものなのでうまく使おう&lt;/li&gt;
&lt;li&gt;統合開発環境(IDE)のようなツールは、開発者にとって必須のツールである&lt;/li&gt;
&lt;li&gt;このようなツールは、生産性を10~25%,継続的開発を25~50%程高める&lt;/li&gt;
&lt;li&gt;ただし、最も困難な「考える」ことは、ツールにはできない。そのことを心して使え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ここで言っているツールは、原文では、&amp;ldquo;CASEツール&amp;rdquo;。 この書籍が出版されたころはトレンドだったのだろう。さすがに、今の時代、これはないので、統合開発環境(IDE)と言い換えてみた。&lt;/p&gt;
&lt;p&gt;まぁ何でもそうだが、道具は、使いよう。使い方を間違えるとかえってダメになる。ツール自体が、何ができて、何ができないのか、は、ちゃんと把握しておこう。それが生産性を挙げるためのツールの使い方の基本。&lt;/p&gt;
&lt;p&gt;原文では、以下のように続く。&lt;/p&gt;
&lt;p&gt;購入されたCASE ツールの70% が実際に使われることなく終わっている。&lt;/p&gt;
&lt;p&gt;と。これは今の時代でもあたってるかも。高額なツールとか開発環境を購入しても、７割くらいは眠っているだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理22</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8622/</link>
        <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8622/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ツールは便利だが、使い方や効果を知らないで使うのは危険である&lt;/li&gt;
&lt;li&gt;ツールを使う前に、技術や使い方をまず学び、訓練を受けよ&lt;/li&gt;
&lt;li&gt;ツールでやりたいことを、まずは「手動で」やってみて、ひととおり理解してうまく動くことを確認するのがよい、手動でできなければツールでもできない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ツールを盲目的に信じるな
ツールは技術の穴埋めをするものではない
ヘタに使うと、かえってひどいことになる&lt;/p&gt;
&lt;p&gt;ツールは、上手に使えば大変便利なものなので、ちゃんと知った上で使いましょうね、ということ。&lt;/p&gt;
&lt;p&gt;ツール自体にバグがあることも、ある。ツール自体が絶対的に信用できるもの、などとだれが言えようか。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理21</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8621/</link>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8621/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアが持つ本質的に複雑な世界に対して、「単一の」開発法でのアプローチを試みようとする開発者が多い&lt;/li&gt;
&lt;li&gt;しかし、電気工学など、他の工学分野では、内容やフェーズにに応じて使う表記法や手法があり、それぞれ異なるのが通常である&lt;/li&gt;
&lt;li&gt;ソフトウェアの世界も、他の工学分野と同様、フェーズ、プロセスに応じた手法や表記法があるので、それぞれの適したものを使え&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;これは、そういう時代があったのか、としか言いようがない。&lt;/p&gt;
&lt;p&gt;どんな複雑な問題に対しても、どのような場面でも通用するような、単一の表記法や技法があると信じて、その実現を目標としていた、そういう時代が。&lt;/p&gt;
&lt;p&gt;原理19 では、「そのような夢のような道具は、ない」と言っている。現代では、もうそれは自明だろう。&lt;/p&gt;
&lt;p&gt;ソフトウェア開発のプロセスは、概ね以下のように分けられるだろう。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要求分析&lt;/li&gt;
&lt;li&gt;設計&lt;/li&gt;
&lt;li&gt;実装(コーディング)&lt;/li&gt;
&lt;li&gt;評価・テスト&lt;/li&gt;
&lt;li&gt;品質保証&lt;/li&gt;
&lt;li&gt;保守・運用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;そして、これら全体に関わる、管理。&lt;/p&gt;
&lt;p&gt;今の時代の規模になったら、もう、これらは、完全に「別物」と思って、それぞれの世界で最適なツールや手法がある、と考えるべきだ。&lt;/p&gt;
&lt;p&gt;もっと言うと、実際のソフトウェア開発では、役割はもっと細分化されている。&lt;/p&gt;
&lt;p&gt;ちょっと話はそれるが、最近&amp;quot;Escalation Engineer&amp;quot; という役割を知った。QA やテスト部隊が挙げる不具合を解析し、不具合の原因となっていそうなモジュールを担当するエンジニアに修正を「振る」役割、とのこと。&lt;/p&gt;
&lt;p&gt;QAや評価部隊から挙がったバグは、自分で原因をつきとめて自分で修正する、というプロセスでしかやったことない自分には、ここまで細分化されているのか、という驚きしか、なかった。&lt;/p&gt;
&lt;p&gt;高い技術、知識、経験が必要で、と～～ってても大事な役割なのは確かなんだけど、一年くらいしたら飽きそうｗｗ&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理20</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8620/</link>
        <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8620/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア開発の各プロセスにおける仕様は、確定した普遍的なものではなくい「仮定」が多くある&lt;/li&gt;
&lt;li&gt;ソフトウェアは置かれた環境は無限であり、このような仮定の存在も無限にある&lt;/li&gt;
&lt;li&gt;その仮定は、開発においてすべて記録せよ、それがどんなに明白なものだったり、明らかに馬鹿げていると思われるものだとしても&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;ちょっと回りくどい気が。多分、こういうこと。&lt;/p&gt;
&lt;p&gt;要求、設計、実装、テストのソフトウェア開発のプロセスを進めるのにおいて、明らかにしておかなくてはならない事項がたくさん、無限に、ある。要件とか仕様とか、達成基準とか。&lt;/p&gt;
&lt;p&gt;これらは、すべて、一旦決めたら二度と変わらないものではなく、何らかの理由で変更されるものである。全部が全部ではないが、多くの事項が、そう。&lt;/p&gt;
&lt;p&gt;ここで言う仮定は、そのそれぞれの事項で「仮決め」されたもののことを指す。&lt;/p&gt;
&lt;p&gt;その「仮定」は、ソフトウェア開発に最適な、変化に強く柔軟な開発にとって、変化発生時に、今後の開発の方向性や内容を決めるのにとって最重要な情報なので、ちゃんとすべてを記録しておきなさい&lt;/p&gt;
&lt;p&gt;こういうこと。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理19</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8619/</link>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8619/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアの分野には、魔法のようにすぐに役立つ解決策は、存在しない&lt;/li&gt;
&lt;li&gt;なので、「これこれさえやれば、品質が上がりますよ」という謳い文句は、まず疑ってかかれ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;原理の文言だけ見ると、誤解しやすい。原文の英語も同様。&lt;/p&gt;
&lt;p&gt;ソフトウェアは、解決策が全く存在しないほど複雑になり得る。&lt;/p&gt;
&lt;p&gt;と言っているのでは、ない。&lt;/p&gt;
&lt;p&gt;どんな場面でも、どんな複雑な問題に対しても解決できる「唯一の」「定型化された」方法はありませんよ。&lt;/p&gt;
&lt;p&gt;というのが趣旨。&lt;/p&gt;
&lt;p&gt;ソフトウェアの世界でよく言われる「銀の弾丸は存在しない」という話。&lt;/p&gt;
&lt;p&gt;ソフトウェアの進化は、複雑さに対する解決策の発明・提案の繰り返し、ということができる。マシン語に変わって高級言語、オブジェクト指向、AI、コンピューティングパワーの増大。&lt;/p&gt;
&lt;p&gt;これらは、確かに一時の複雑さを解決し、コトが簡単になってソフトウェアに大きな進化をもたらしたソリューションだが、「なんでも解決できた」わけでは、決してない。&lt;/p&gt;
&lt;p&gt;新たな問題が生まれたものもある。それに何より、たまたま直面した複雑さに起因する問題を解決したに過ぎず、ソフトウェアが持つ本質的な問題を解決したわけでは、ない。&lt;/p&gt;
&lt;p&gt;「偶有性」という言葉をご存知だろうか。「偶然の出会い」みたいな意味を持つ言葉。&lt;/p&gt;
&lt;p&gt;ソフトウェアのソリューションは、「偶有的な複雑性」を解決するものであって、汎用的な複雑性は解決できない。それくらい、ソフトウェアは、複雑だ、ということ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理199</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86199/</link>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86199/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理139</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86139/</link>
        <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86139/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理18</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8618/</link>
        <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8618/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マニュアルが短ければ短いほど、ソフトウェアの品質は良いものだ&lt;/li&gt;
&lt;li&gt;説明を必要としなくても使えるのが良いソフトウェア。大量のマニュアルは、ソフトウェアの品質をカバーしたりは、しない&lt;/li&gt;
&lt;li&gt;標準品を用いる、一目でわかるアイコン、慣れ親しんだUX を使う、といったアプローチが挙げられる&lt;/li&gt;
&lt;li&gt;ソフトウェア開発者は、トリッキーなインターフェースのような「特殊な」ものを好み勝ちだが、顧客は、簡潔でわかりやすいものを好むものだ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;これ、明確に、ソフトウェアの品質を図る指標としていい。どんだけ説明しなくて済むか。試しに、まったく説明せずに他人に使ってもらうとよい。&lt;/p&gt;
&lt;p&gt;モバイルアプリなら、インストールしたモバイル機器だけ渡す。&lt;/p&gt;
&lt;p&gt;ライブラリやミドルウェアなら、ソースコードとAPI リファレンスだけ渡す。&lt;/p&gt;
&lt;p&gt;そんで、どれだけ問い合わせがあるか。&lt;/p&gt;
&lt;p&gt;難しい仕様にして、結果問い合わせがいっぱいあって、一生懸命仕事して、それが優れている、と思うエンジニアは、残念ながら、多い。&lt;/p&gt;
&lt;p&gt;「全くの逆」なのだ。問い合わせなんかなくとも使えるのが、いいソフトウェア。頭ン中をこの瞬間から切り替えよう。&lt;/p&gt;
&lt;p&gt;元々、難しいものは、可能な限り平易に。易しいものは、やさしく。それができるのが、優れたエンジニアである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理17</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8617/</link>
        <pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8617/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア開発のコスト削減の最も効果的な方法は、「開発せず購入すること」である&lt;/li&gt;
&lt;li&gt;既製品のソフトウェアは、所望の要件を満たさないかもしれないが、だからといって一から作ったらその10倍はコストがかかる羽目になる&lt;/li&gt;
&lt;li&gt;新しいソフトウェア開発にエンジニアは最初は喜ぶが、期限やコストが迫ると次第にトーンダウンするものだ&lt;/li&gt;
&lt;li&gt;なので、できるだけ多くのソフトウェアを「再利用」するべきだ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;エンジニア、一から作りたがるからなぁ。&lt;/p&gt;
&lt;p&gt;はっきり言っておく。一番カネのかかる方法は、何も利用せず一からすべてを自前でつくることである。&lt;/p&gt;
&lt;p&gt;今の時代、無償で活用できるソフトウェアは、いくらでもある。オープンだからといって質が低いわけではない。むしろ、いいソフトウェアだと、世界中の優秀なエンジニアが集まって開発したりする。そんなものを活用せず、自分で作ったもののほうが立派になる理由、どこにあるねん。&lt;/p&gt;
&lt;p&gt;まず、タダで使えるものを探そう。次に、有償で使えるものを探そう。それで満たされなかった部分を自前で開発しよう。&lt;/p&gt;
&lt;p&gt;既製品やオープンソースを充分活用する。それを、「自前の」ソフトウェア開発と、呼ぶ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理16</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8616/</link>
        <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8616/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;システム工学　第一の法則 : システムのすべてのライフルサイクルにおいて、システムは変更される。そして、それは不可避である&lt;/li&gt;
&lt;li&gt;リリース後にユーザのさらなる要求に加え、リリース前の開発期間中でも変更される可能性はある&lt;/li&gt;
&lt;li&gt;なので、ソフトウェア開発のすべてのプロセスにおいて、変更に柔軟に対応できるようにしておくべきである&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;もう、耳タコかも知れない。ソフトウェアは変更されるものである。というより、変化しながら進化するものだ、と捉えた方が前向きかもしれない。&lt;/p&gt;
&lt;p&gt;ソフトウェア開発で変更が発生する場合。どのようなものが思いつくだろうか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鶴の一声&lt;/li&gt;
&lt;li&gt;ユーザの新たな要求&lt;/li&gt;
&lt;li&gt;システム設計の致命的な欠陥判明&lt;/li&gt;
&lt;li&gt;エンジニアの急な離脱&lt;/li&gt;
&lt;li&gt;開発計画策定の甘さにより計画とのずれ発生&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にも、あるだろう。鶴の一声とか、エンジニア離脱とか、予期しない、制御できないものは、仕方ない。&lt;/p&gt;
&lt;p&gt;それ以外の要因。なんとなく眺めていたら、事前に対処できそう、と思うかもしれない。&lt;/p&gt;
&lt;p&gt;これが、基本、無理なんだな。なんでか、というと、ソフトウェアはあまりにも複雑だから。人があらかじめ予想、検討できるキャパを超えているのである。だから、いわゆる、走りながら考える、原理でいうと「漸進的に成長させる」というのが正解、という分野なのである。&lt;/p&gt;
&lt;p&gt;その代わり、他の原理でも言っているが、変更は、避けられない。ではどうしたらいいか、は、他の原理の解説でもあげているが、構成管理をうまく使うとか、変更が容易となるような設計にしておけ、とか。この原理には、もう一つ、重要なことが書いてある。&lt;/p&gt;
&lt;p&gt;変更のために十分な余裕をとること。&lt;/p&gt;
&lt;p&gt;期限にしてもリソースにしても。いわゆる「カツカツ」にしては、ならない。２割くらいは、マージンをみておいたほうがいい。必ず、そのマージンは、食い潰すことに、なる。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理15</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8615/</link>
        <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8615/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;高機能・高性能であればあるほど、顧客はさらにもっと多い・高いものを求めたがるものだ&lt;/li&gt;
&lt;li&gt;リリース後、顧客からたくさんの、そのような要求があることを理解し、管理、技術、プロセスといった面で備えよ&lt;/li&gt;
&lt;li&gt;ドキュメントに変更履歴を記載する、構成管理システムを導入する、ソフトウェアの設計は変更に強くしておく、といったアプローチが挙げられる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;こ「高機能・高性能であればあるほど」なんですね。たしかに。顧客は、&lt;/p&gt;
&lt;p&gt;「今知っているレベルよりより高いものを常に」かと思っていました。じゃ、あまり機能や性能が立派でないときは、求めないんですかね。あきらめるのかなｗ&lt;/p&gt;
&lt;p&gt;そう、頑張って立派な成果を出せば出すほど、いい意味で欲がでるんでしょうね、お客さんは、もっといいものを求めるように、なります。開発者にとっては、嬉しいような、つらいような。&lt;/p&gt;
&lt;p&gt;それより、大事なことは。&lt;/p&gt;
&lt;p&gt;顧客というものはそういうものなので、それを受け入れて、最初からソフトウェアの設計・実装、プロセス、管理のあらゆる面について、変更や追加に対して柔軟にしておきなさい、ということ。&lt;/p&gt;
&lt;p&gt;201の鉄則中にも、このための原理がいくつもある。「システムは漸進的に成長させよ」「ソフトウェアは変化し続ける」、、などなど。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理14</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8614/</link>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8614/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェア開発のリスク軽減に最も効果的な方法は、「少しずづ開発を進める」ことだ&lt;/li&gt;
&lt;li&gt;限られた最小限の機能から始め、それを少しづつ成長させて大きな機能のものとする方法である&lt;/li&gt;
&lt;li&gt;利点は、各開発段階でのリスクが抑えられること、こまめにユーザのフィードバックが得られること、短所は、元の設計がマズいときは完全な再設計が必要となること&lt;/li&gt;
&lt;li&gt;この短所を減らすための手法が「使い捨てプロトタイプ」である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「斬新的（ざんしんてき）」は、Incremental の日本語訳。原本には&amp;quot;Grow incrementally&amp;quot; とある。今では「インクリメンタル開発」という言葉が定着している。&lt;/p&gt;
&lt;p&gt;そして、「最初は小さいところから」は、&amp;ldquo;Start small&amp;rdquo; . こちらも、ビジネス用語だが「スモールスタート」という言葉が、すでに馴染みのあるものになっている。&lt;/p&gt;
&lt;p&gt;小さなことを積み重ねて、大きな成果につなげる。世の中一般的になんでも、これが大事なのは自明。&lt;/p&gt;
&lt;p&gt;ソフトウェアは、凄いスピードで成長している世界だ。そんな中では、このようなインクリメンタルな開発で柔軟に対応していくことが、ますます必要となってくる。小さなことから始めて、小さなことを積み重ねる。現代のソフトウェア開発により当てはまることだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理40</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8640/</link>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8640/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;要求は、理解するのも定義するのも、難しいものだ。だからといって要求を明らかにし要求仕様書を作ることを端折ってはならない&lt;/li&gt;
&lt;li&gt;要求に関するより多くの情報を得るためには、「今すぐ」「何でも」やれ&lt;/li&gt;
&lt;li&gt;そして、得たものから導く出したシステムの計画を「要求仕様書」に明文化せよ&lt;/li&gt;
&lt;li&gt;要求が大きく変わることが予想されるなら、インクリメンタル開発を計画してもいいが、その場合でも各ステップで要求の定義と仕様書の明文化はきちんとやれ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;それっくらい、要件定義というのは、ソフトウェア開発の成功のカギとなる重要なことである、と理解するといい。&lt;/p&gt;
&lt;p&gt;それにしても、要求は、難しい。「要求工学」という、立派に工学の一つの分野で、実はちゃんと学んだことは、ないw&lt;/p&gt;
&lt;p&gt;学問としてもそうだが、要求を得るための行動も然り。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロトタイピング&lt;/li&gt;
&lt;li&gt;顧客との密なコミュニケーション&lt;/li&gt;
&lt;li&gt;エンドユーザと一定期間仕事をして不満に思うことなどを「体感」する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロトタイピングを進めるのは、まぁエンジニアなら、わかるだろう。あとの２つは、エンジニアリングとは、少なくとも直接的には、言い難い行動。&lt;/p&gt;
&lt;p&gt;それに、得てして、エンジニアが思っていることと、顧客が考えていることは、違う。顧客やエンドユーザのことを知れば知るほど、エンジニアが元々考えていることからかけ離れていくかも、知れない。&lt;/p&gt;
&lt;p&gt;で、ここからが、本質。だからと言って、要求のプロセスを端折ったり、手抜きをして、設計や実装に進んではダメですよ、ということ。&lt;/p&gt;
&lt;p&gt;要件を明らかにするためのことは、「今すぐ」「何でも」やるべし。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理13</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8613/</link>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8613/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使い捨て型のプロトタイプは素早く作れ&lt;/li&gt;
&lt;li&gt;簡単な要求仕様書さえあれば十分、品質や体裁は気にしなくていい&lt;/li&gt;
&lt;li&gt;言語は何を使ってもいい、本番との言語の差分について気にしなくていい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;とにかく「スピード重視」ということ。&lt;/p&gt;
&lt;p&gt;言語は何でもいい、とあるが、もっというと、プログラミングでなくてもいい。モバイルアプリのUX なら、PowerPointで書いたポンチ絵とか、動画でもいいかもしれない。&lt;/p&gt;
&lt;p&gt;作る予定のスマホアプリの機能を紹介するのに、Android で画面遷移だけ、画面もネットで拾ってきて、だ〜いたいこんな機能、というのを見せるアプリを一時間くらいで作ったことがある。やりたいことは伝わったし、ウケたし、目的はそれで十分達成。そしてもちろん、捨てた。&lt;/p&gt;
&lt;p&gt;使い捨て型のプロトタイプなら、それで、いいのだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理173</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86173/</link>
        <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86173/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理12</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8612/</link>
        <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8612/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使い捨て型のプロトタイプには、よく理解されていない、要件が不明確な機能「のみ」を組み込め&lt;/li&gt;
&lt;li&gt;進化型のプロトタイプには、最もよく理解されている、最も明確な機能を組み込め&lt;/li&gt;
&lt;li&gt;いずれも、それぞれの型の目的に沿った機能を組み込むことにより、ユーザからの適切なフィードバックが得られる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;原理11「適切な型のプロトタイプを開発せよ」の続き。&lt;/p&gt;
&lt;p&gt;プロトタイプは、使い捨てであろうが、進化型であろうが、目的は、「ユーザのフードバックを」「素早く」得るために作るものである。&lt;/p&gt;
&lt;p&gt;この２つ目の「素早く」を念頭に置いておこう。余計なことは、やらない。得たい情報、見せたいものだけのために、作るものだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理84</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8684/</link>
        <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8684/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理11</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8611/</link>
        <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8611/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;プロトタイプは「使い捨て型」と「進化型」の２つの種類がある&lt;/li&gt;
&lt;li&gt;「使い捨て型」は、フィードバックを得るために素早く、重要な事項が不明確な時に作られるものである&lt;/li&gt;
&lt;li&gt;「進化型」は、品質もそれなりに確保され、フィードバックを得た後は修正をされて継続的に進化するものであり、重要な事項は明確だが他の多くのものが不明確な時に作られるものである&lt;/li&gt;
&lt;li&gt;ほとんどの事項が不明確な時は、まず使い捨て型、その後進化型のプロトタイプを作ると良い&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「要旨」の通り。あえていうなら、&lt;/p&gt;
&lt;p&gt;「使い捨て型」を作る時は、とにかく素早く作ることを優先させよう。エンジニアは、「ちゃんと」作りたがる性の方が多い。つい、それなりにきちんと動くものにするのに時間をかけがちだが、「動いて、人に見せられれば良い」くらいに割り切った方がいい。３回に一回くらいしかきちんと動かない代物でも、伝わればフィードバックは得られて所望の目的は充分達するのだから。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理137</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86137/</link>
        <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86137/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理10</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8610/</link>
        <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8610/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;アルゴリズム、設計など、なんらかの「新規項目」があるソフトウェアは、最初からうまくいかないことが常である&lt;/li&gt;
&lt;li&gt;最初のソフトウェアは、その新規項目の設計や方向性が正しいかを検討するためのものであるべきだ&lt;/li&gt;
&lt;li&gt;そして、全体の25% をこのような新規項目の妥当性検討に使うべきである&lt;/li&gt;
&lt;li&gt;具体的な施策としては、「プロトタイプを作る」「リリース後も定期的にアップデートできるようにしておく」と言ったことが挙げられる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;新しいものは、最初からはうまくいかない。これは、どの分野でも、何でもそう。じゃどうしたらいいか。&lt;/p&gt;
&lt;p&gt;新しいものは、事前に充分な検討を重ねよう、ではなく、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上手くいくまでに何度か作り直そう&lt;/li&gt;
&lt;li&gt;作って、妥当性や課題などの情報を得たら捨てて、それを活かして次より良いのを作ろう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こういうアプローチがアリ、なのがソフトウェア開発らしい、と言ってもいいかもしれない。&lt;/p&gt;
&lt;p&gt;なぜこの方法がソフトウェア開発では有効なのか。いくつか考えられることを挙げてみる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作って、見せて、触ってみて初めて気づくことが多い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作らずに、事前に大事なことが洗い出せれば、それに越したことはない。ただ、ソフトウェアは一般的にはとても複雑。そして大抵の場合は目標が不明確。なので、プロトタイプのような方法が有効たり得る。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使い捨てのコストが安い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これに尽きるんじゃないだろうか。&lt;/p&gt;
&lt;p&gt;仮に、今新しい航空機を作ってるとしよう。問題点を明らかにするために、じゃ作って飛ばしてみようか、とは、絶対にならない。作って、捨てるには莫大な費用がかかる。そして、問題点がわかったら、その時は大変なことになる。なので、事前に問題点を洗い出す、作る前にシミュレーションを繰り返す、というアプローチになる。&lt;/p&gt;
&lt;p&gt;ソフトウェアは、これと比べれば、作るのも容易、そして作り直すのも容易。医療用のシステムのような人命に関わるものもあるが、そうでない限り、大事にはならない。なので、妥当性とか課題とか、次に活かせそうな情報が取得して、破棄することに対するコストよりも、獲得した情報の価値が高ければ良い。&lt;/p&gt;
&lt;p&gt;Docker のような仮想環境だと、実行環境からして手軽に作れる。コンピュータ（マシン）を手軽に作っては捨てることができる、ということだ。&lt;/p&gt;
&lt;p&gt;基本、ソフトウェア開発は、「作っては捨てる」を「カンタンに安く」実行できる方向に進化しているように思う。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理136</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86136/</link>
        <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86136/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理9</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%869/</link>
        <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%869/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開発者と顧客が全く異なる、相容れない目標を持っていたためにプロジェクトが失敗に終わることがある&lt;/li&gt;
&lt;li&gt;関係者間の異なる目標は容易に調整できるようにせよ&lt;/li&gt;
&lt;li&gt;「優先度をつける」「要求達成に対する開発者にインセンティブを定義する」「納期が遅れた場合のペナルティーを定義する」と言ったことが、これに当てはまるだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開発者と顧客は、目標は異なるのが当たり前。もっというと、複数の開発チームや複数の顧客、管理者と言った、多くの関係者（ステークホルダー）がいるプロジェクトだと、それぞれが持っている望みや目標は、違うものだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際にプロジェクトの成否に関わるほど差分が無い場合も多いが、何れにしても、「違うものだ」ということと、プロジェクトを成功に導くためには、その違いを埋めるために「何かをしなくてはならない」ということは、きちんと認識しておくべきだ。&lt;/p&gt;
&lt;p&gt;じゃ何をしなくては、の一つ目が、一つ前の原理、「原理8:一般:顧客やユーザとよく話し合え」である。&lt;/p&gt;
&lt;p&gt;そして、この原理が、「何を話す必要があるのか」ということになる。&lt;/p&gt;
&lt;p&gt;「見返りを合わせよ」という、なんだかピンとこない表現だが、書いてあることは、要するに、こういうこと。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;それぞれの要求を「見える化」「定量化」して、その上で「優先度を設けよ」&lt;/li&gt;
&lt;li&gt;そうすれば、違いがあっても調整がやりやすくなりますよ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その通り。逆にいうと、よく話し合わず、項目を明らかにもせず、優先度もつけないから、「揉める」のである。&lt;/p&gt;
&lt;p&gt;要求や目標が不明確なときは「開発者側から」たたき台を作って提案するのがいい。「我々は要求や達成項目をこう考えていますが、いいですよね」と持ちかけると、主導権を保てるし、何よりも積極的で、気持ちいい。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理67</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8667/</link>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8667/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理8</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%868/</link>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%868/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;真のニーズを獲得する唯一の方法は、プロジェクトの最重要人物である顧客とよく話し合うことだ&lt;/li&gt;
&lt;li&gt;開発にあたり、早い段階で顧客を巻き込もう&lt;/li&gt;
&lt;li&gt;製品のプロトタイプを早い段階で収めるとか、ロールプレイをやるとか、顧客に早い段階でプロジェクトに参加してもらう手段を取ろう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;本文には、さらに、&lt;/p&gt;
&lt;p&gt;開発者にとっては、顧客と頻繁に話をせず、誰にも干渉されずに開発を進める方が気楽かもしれないが、そのような進め方をして最終的に出来上がったものを、顧客が本当に臨むだろうか。&lt;/p&gt;
&lt;p&gt;と言っている。&lt;/p&gt;
&lt;p&gt;「開発者の思考」と「顧客の要求」は、話をしなければ、絶対に一致しない。お互いに自分の都合の良いように考えているから。そこを、互いに「妥協」するのが、真のニーズを明らかにし、開発を正しい方向に向かわせるために必要なことである。&lt;/p&gt;
&lt;p&gt;原理7 の「プロトタイプを早い段階で納めよ」は、まさにこの原理に即した行動。他には、身近な開発者に想定顧客になってもらうとか、方法はいくつかある。実行するのは難しいが。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理7</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%867/</link>
        <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%867/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;真の顧客のニーズを得るための最も効果的な方法は、製品のプロトタイプを提供して使ってもらうことである&lt;/li&gt;
&lt;li&gt;ウォーターフォールモデルの手法だと、顧客への最初の納品は、最後の工程の、開発資源をほぼ使い切った時に行われる&lt;/li&gt;
&lt;li&gt;一方、資源の20%程度が消費されたくらいの段階ででプロトタイプを作成し顧客のフィードバックを得る方法（アジャイル開発とか）もあり&lt;/li&gt;
&lt;li&gt;この方法だと、顧客のニーズをより明確に知ることもできるし、開発の方向性も早い段階で正しいものにすることができる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;百聞は一見に如かず。何らかの手段で顧客に、作る製品を「見える」ようにしましょう、そして使ってもらって得たフィードバックは、最良の要求仕様になり得ますよ、ということ。&lt;/p&gt;
&lt;p&gt;「ウォーターフォールモデル」と「アジャイル開発」は、「二大開発手法」といっていい。&lt;/p&gt;
&lt;p&gt;簡単にいうと、ウォーターフォール（滝）モデルは、上流から下流の工程へ順次移行していき、前の工程には戻らない手法。&lt;/p&gt;
&lt;p&gt;一方、アジャイル（Agile = 素早い）開発は、概ね二週間程度の短い期間で一つの機能を開発・リリースし、その結果をフィードバックして次の期間に向かうことにより、こまめに方向を決めて進めていくやり方。&lt;/p&gt;
&lt;p&gt;今では、アジャイル開発がもてはやされていて、その裏返しとして、ウォーターフォールモデルが批判される傾向にあるが、本来は、開発案件によって使い分けるもの。&lt;/p&gt;
&lt;p&gt;やること、やり方が決まっていれば、ウォーターフォールの方がいい。管理、楽だし。&lt;/p&gt;
&lt;p&gt;一方、目指す目標が漠然としているとか、アジャイルの方がいい。半年もしたら新しい技術が出てきたり、トレンド変わったりして進化が激しい技術開発も、そう。一年経って初めて納品、とかやっていたら、浦島太郎になりますぜ〜&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理89</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8689/</link>
        <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8689/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理6</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%866/</link>
        <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%866/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;性能が良くないソフトウェアは、良くない部分だけ切り離して新しく設計し直す、といった対応が可能&lt;/li&gt;
&lt;li&gt;一方、信頼性が良くないソフトウェアは、その発見が難しくかつ修復するのも困難なものである&lt;/li&gt;
&lt;li&gt;かつ、信頼性の低いシステムは、致命的な問題を発生させる可能性もあり、タチが悪い&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「信頼性」も「性能」な一部の気がしますが。多分、ここでいう「性能」と「信頼性」の違いは、「不具合の再現頻度の高低」ではなかろうか。&lt;/p&gt;
&lt;p&gt;発見できて、原因がわかれば、対応は可能。しかし、数年経って気づいたとか、稀にシステムが停止する、といったものは、再現頻度が低いので、原因解析にも途方も無い時間がかかる。原因がわかれば修正は容易かもしれないが、その確認にも、また時間がかかる。&lt;/p&gt;
&lt;p&gt;開発時には、信頼性に関するテスト（ロングラン・テストとか破壊テストとか）を早い段階で実行しておきなさい、というくらいしか、思いつく対策が、ない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理85</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8685/</link>
        <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8685/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理127</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86127/</link>
        <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86127/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理4</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%864/</link>
        <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%864/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;この世界、機能しない、バグだらけ、要求を満たさない「出来の悪い」ソフトウェアでいっぱいだが&lt;/li&gt;
&lt;li&gt;ちゃんと機能し、バグがほぼなく、要件を満たす「高品質な」ソフトウェアは、実現可能である&lt;/li&gt;
&lt;li&gt;要件明確化の手法、設計の工夫、優秀な人材の割り当てなど、品質を向上させる実績のあらゆる手法を導入することにより高品質なソフトウェアは実現できる&lt;/li&gt;
&lt;li&gt;ただ、その実現には高額な費用を要する&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;キチンとした管理&lt;/li&gt;
&lt;li&gt;快適な環境&lt;/li&gt;
&lt;li&gt;優秀な人材&lt;/li&gt;
&lt;li&gt;まっとうな計画&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらが全部そろって、初めて高品質になる、くらいに考えるといい。&lt;/p&gt;
&lt;p&gt;確かに、世の中のソフトウェアは99%ゴミ、プロジェクトの9割は失敗に終わる、と言ってもいいくらい、ダメな例が溢れている。&lt;/p&gt;
&lt;p&gt;「管理がずさん」「劣悪な環境」「出来悪いエンジニア」「無謀な計画」どれも、経験あるけど、結果は推して知るべし。&lt;/p&gt;
&lt;p&gt;当然、これらを満たすには、お金は、かかる。現実、予算は限られているから、この要素のどこを充実させ、どこを妥協するか、という最適化問題みたいになるだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理5</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%865/</link>
        <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%865/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;品質に含まれる全てのものは、ソフトウェアに「後付け」することはできない&lt;/li&gt;
&lt;li&gt;高品質を達成するのは「開発の初期段階から」努力してやるものだ&lt;/li&gt;
&lt;li&gt;使い捨てのプロトタイプを製品化するなぞ、論外だ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;201ある原理の中でもトップ10に入るくらい大事な事項で、かつ、トップ10に入るくらい「周知されていない」原理でも、ある。&lt;/p&gt;
&lt;p&gt;要件定義では「機能要件」「非機能要件」というが、その「非機能要件」が品質に当てはまるものである。保守性、信頼性、安全性など&amp;quot;&amp;hellip;bility&amp;quot;と言われているもの、全て、開発途中で「機能要件」のように追加したり変更したりは、基本、「出来ない」。&lt;/p&gt;
&lt;p&gt;なんで、か。&lt;/p&gt;
&lt;p&gt;いろんな考え方があるが、「品質」の各項目は、「機能」のほぼ全てにまたがるものであり、各機能と独立したものではない存在だから、だろう。&lt;/p&gt;
&lt;p&gt;品質を変えたら、多くの機能を見直さなくてはならないだろう。逆に機能を変えたら品質を見直さなけれっばならない。そもそも両立する概念では、ない。&lt;/p&gt;
&lt;p&gt;機能は、見える。品質は、見えない。
単にその差だけで、機能を優先し、品質は後から足すようなことになりがちだ。それが大きな間違い。品質が必要ならば、最初から考慮に入れて各プロセスを進めましょう、ということ。&lt;/p&gt;
&lt;p&gt;アーキテクチャは、「機能要件」でなく「非機能要件」を優先させよ、と聞く。その通りだ。同じ理由。&lt;/p&gt;
&lt;p&gt;エンジニアもマネージャも、この原理は、しかと頭に叩き込んでおこう、そうすれば、今この時代でも炎上プロジェクトの一つとなり得る「使い捨てのプロトタイプを製品化」なんて、絶対に起きえないはずだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理187</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86187/</link>
        <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86187/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理38</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8638/</link>
        <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8638/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不正確なコスト見積もり、ほぼ全て要求プロセスが要因だ&lt;/li&gt;
&lt;li&gt;要求仕様をクリアにするためのプロトタイピングをやれ&lt;/li&gt;
&lt;li&gt;要求の変更に備えよ。構成管理システムを使うなど、形式的なアプローチをと&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;本文では、コスト見積もりのいい加減さの上位5項目は全部要求プロセスだ、と言っている。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;頻繁な要求仕様の変更&lt;/li&gt;
&lt;li&gt;要求項目の欠落&lt;/li&gt;
&lt;li&gt;コミュニケーション不足&lt;/li&gt;
&lt;li&gt;要求仕様の質&lt;/li&gt;
&lt;li&gt;不十分な分析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;で、この原理、「Garbage In Garbage Out（ガーベジ・イン・ガーベジ・アウト、GIGO）」と言いたげなタイトルの内容が本質なのではない、と思う。&lt;/p&gt;
&lt;p&gt;言いたいのは、きっと、こうだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コスト見積もりの精度向上は、要求仕様の精度向上が全て&lt;/li&gt;
&lt;li&gt;が、要求仕様は不明確だったり、しょっちゅう変更されるものだ&lt;/li&gt;
&lt;li&gt;なので、顧客と、要求仕様を明確にするために、「密なコミュニケーション」「プロトタイピング」をやれ&lt;/li&gt;
&lt;li&gt;そして、要求仕様は変わって行くものなので、それに備えよ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロジェクトが始まったら、要求仕様は、「開発側から」提案することを薦める。顧客に、要求仕様を出してください、と言っても、ちゃんとしたのなぞ、まず出てこない。なぜなら、何をどう言ったら開発者が望むものを作ってくれるのか、が大抵はわからないから。&lt;/p&gt;
&lt;p&gt;なので、開発者側から「お望みなのは、こういうことですよね」と、叩き台（ま、叩かれ台ね）として要求仕様のリストを出す。それが、始まり。&lt;/p&gt;
&lt;p&gt;その後は、その叩き台をベースに、密にコミュニケーションをとって、真の要求を引き出すとか、プロトタイピングをやって顧客に実感してもらうとかして、要求をブラッシュアップしていけばいい。&lt;/p&gt;
&lt;p&gt;ちなみに、文言でどんなに詳しく書いてあっても、プロトタイプ、動画、擬似UIなど、「見える」ものを作って顧客と会話すると、劇的に話が進む。&lt;/p&gt;
&lt;p&gt;「百聞は一見に如かず」である。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理39</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8639/</link>
        <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8639/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;「問題を解く」には、解決策を決める（==要求仕様を書く）より前に「問題を特定」しよう&lt;/li&gt;
&lt;li&gt;問題はえてして明確にしづらく、人によって、味方によって異なるものだ&lt;/li&gt;
&lt;li&gt;その捉えた問題ごとに別々の解決策がある&lt;/li&gt;
&lt;li&gt;最初に決めた解決策を変更することをためらってはいけない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;金言。エンジニアは、いや人は、かな、問題に直面したときに、すぐに直感的に思いついた解決策を取ろうとする。それがたまたま正解なら、それでもいい。ただ、大抵は、そんなに単純では、ない。&lt;/p&gt;
&lt;p&gt;本文記載されているものにに近い例を挙げる。&lt;/p&gt;
&lt;p&gt;「通勤時の電車が激混みで苦痛だ」&lt;/p&gt;
&lt;p&gt;確かにこれは問題。鉄道会社からしたら、その解決法は、「ダイヤを密にする」「車両を増結する」とといったモニになるだろうか。&lt;/p&gt;
&lt;p&gt;一方、通勤者からしたら、同じ時間に通勤するからこのようなことになるわけで、問題は、以下のようにも捉えることができる。&lt;/p&gt;
&lt;p&gt;「同じ時間に通勤する人が多すぎる」
「仕事をするのに通勤が必要なのか？」&lt;/p&gt;
&lt;p&gt;そうなると、解決策は「時差通勤」とか「テレワーク」というものになるだろう。&lt;/p&gt;
&lt;p&gt;いうまでもなく、上記のいくつかの解決先は、どれも異なるもので、かかる費用や効果、実現性は全く違う。&lt;/p&gt;
&lt;p&gt;問題をどこに置き、どれを解決するかを決めるのが、先。その上で要求を決めよう。&lt;/p&gt;
&lt;p&gt;そして、大事なのは。&lt;/p&gt;
&lt;p&gt;一旦決めたからといって「決定」ではない、ということ。柔軟に変更することを躊躇しては、ならない。&lt;/p&gt;
&lt;p&gt;「車両増設はホームの延長工事から必要なので多額の費用がかかる」&lt;/p&gt;
&lt;p&gt;「じゃ通勤者に通勤時間をずらしてもらおうか」&lt;/p&gt;
&lt;p&gt;といった具合に、ベストな解決策==要求は変わっていくものだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理66</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8666/</link>
        <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8666/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理135</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86135/</link>
        <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86135/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理188</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86188/</link>
        <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86188/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理91</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8691/</link>
        <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%8691/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理104</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86104/</link>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86104/</guid>
        <description></description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理2</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%862/</link>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%862/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアの品質は、唯一無二の定義は存在しない&lt;/li&gt;
&lt;li&gt;品質は、関係者ごとに異なる可能性があるものである&lt;/li&gt;
&lt;li&gt;そして、それらは、互いに両立しないものとなるジレンマがある&lt;/li&gt;
&lt;li&gt;なので、その優先度を決めて、すべての関係者にオープンにする必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;さらっと読むと、「ま、そうだね、人ごとに違うね」と、さも当然のように思うだろう。が、そのことを理解するのは案外難しい。とにかく、&lt;/p&gt;
&lt;p&gt;「品質の定義が関係者ごとに違って、それらが互いに矛盾する」&lt;/p&gt;
&lt;p&gt;このようなことがあることを「知っておく」ことが、重要であるように思う。&lt;/p&gt;
&lt;p&gt;例を挙げると、品質に対して求めるものは、こんな感じか。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開発者 : スマートな設計・実装、さらにバグがほとんどないコード&lt;/li&gt;
&lt;li&gt;管理者 : 計画通りのマイルストン達成、発生費用が少ない&lt;/li&gt;
&lt;li&gt;顧客 : 正しく動作する、ストレスがなくサクサク動作、使いやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここに挙げたもので、すでに矛盾するものが、ある。&lt;/p&gt;
&lt;p&gt;「スマートな設計」と「発生費用」と「使いやすい」。矛盾とまではいかないけど、全関係者を満足させるのは難しいことは、わかるだろう。&lt;/p&gt;
&lt;p&gt;では、どうしたらいいか。それは、以降に上がる鉄則に、ある。ちょっとだけ先取りすると、こんな感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求品質を明らかにするためのプロトタイプをやろう&lt;/li&gt;
&lt;li&gt;要求品質は変わっていくものなので、柔軟に変更できるように&lt;/li&gt;
&lt;li&gt;顧客とよく話し合え&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;鉄則1 で「品質第一」といったが、「品質」のなんと難しいことよ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理3</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%863/</link>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%863/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生産性（後述）と品質は明確な相関がある&lt;/li&gt;
&lt;li&gt;品質に対する要求が高いと、生産性は落ちる。逆に生産性を追求すると品質は落ちる&lt;/li&gt;
&lt;li&gt;高い品質を保つためには、適切な（本文には明確な数値があるが、略）生産性を保つことが必要である&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;まず、はじめに。&lt;/p&gt;
&lt;p&gt;ここでいう生産性（原文も&amp;quot;productivity&amp;quot;）は、単位時間あたりの「作業量」と考えたほうがいい。本文には、一人月あたりのコード行数(KLOCとか) とかFunction Point とか、古典的な生産性の指標が挙がっている。&lt;/p&gt;
&lt;p&gt;要するに、「質と量は相反するものである」と言っているに等しい。&lt;/p&gt;
&lt;p&gt;一般論としてこれは正しいし、たしかにソフトウェア開発にも当てはまるものである。&lt;/p&gt;
&lt;p&gt;ただ「生産性」という言葉に、少々引っかかる。生産性の定義は、今は当時とはだいぶ違ったものになっているのではないだろうか。&lt;/p&gt;
&lt;p&gt;ソフトウェアで高い成果を挙げるには「コードをたくさん書く」ことが重要だった当時には、「どれだけの量を書けたのか」という指標は大事でだったかもしれない。&lt;/p&gt;
&lt;p&gt;今は、SDK やライブラリ、オープンソースなど、無償で利用できるソフトウェア資産がたくさんある。むしろ、これらを活用して短時間で所望の機能、性能を実現するのが「高い生産性」である。この場合、コード量は、むしろ少ないほうがいい。&lt;/p&gt;
&lt;p&gt;システムやアーキの決定、その上での設計段階で適切なライブラリやオープンソースを活用、その上でコードを書き、充分な品質を確保する、そういったソフトウェア開発のあらゆる面を「短時間で」満たすことがことが「高い生産性」といえるのではなかろうか。&lt;/p&gt;
&lt;p&gt;そう考えると、「生産性」と「品質」は相反するものでは、ない。「品質も含めた生産性」だろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理1</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%861/</link>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%861/</guid>
        <description>&lt;h2 id=&#34;要旨&#34;&gt;要旨&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;品質は何よりも優先されるべきものである&lt;/li&gt;
&lt;li&gt;品質は計測可能でなくてはならない&lt;/li&gt;
&lt;li&gt;品質を上げる成果に対して報いるようなメカニズムが必須&lt;/li&gt;
&lt;li&gt;品質を犠牲にして期限に間に合わせるようなことは絶対にあってはならない。品質が第一の必要条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解説&#34;&gt;解説&lt;/h2&gt;
&lt;p&gt;「品質第一」これが一番最初に来るのが示唆的と言える。201個の鉄則の中でも最重要なもの、と言っていい。&lt;/p&gt;
&lt;p&gt;「品質」を定めるのは難しい。それは原則2 以降で述べられている。見方によってはなんでも、品質。ここでは、「顧客を最低限満足させるレベルに到達した成果」と言えようか。&lt;/p&gt;
&lt;p&gt;品質の良くないソフトウェアに顧客は「絶対に」満足しない。品質はダメだけど納期には間に合いました。なんてのに何の意味があるのか。&lt;/p&gt;
&lt;p&gt;では、その品質が顧客を満足させているか、はどうやって判断すればいいのか。そのためには、品質の定義と、その定義された品質が「計測可能」でなくてはならない。「XXXの処理速度が YYY ミリ秒以下であること」「X時間以上連続稼働し不具合が発生しないこと」と言った、いわゆる「数値化」が必要だ、ということ。&lt;/p&gt;
&lt;p&gt;ところが、である。ここで第一の原則として言及されている、ということは、その品質が犠牲になることが往々にしてある、ということの証左である。品質を犠牲にして納期に間に合わせる、と言ったことが頻繁に起きる。何で？&lt;/p&gt;
&lt;p&gt;いくつか考えられるうちの一つに、「品質達成の評価が難しい」というのが挙げらえるように思う。「品質」と「納期」どちらの方が単純だろうか。&lt;/p&gt;
&lt;p&gt;品質は、前述のように、定義すること、計測可能にすること自体が難しい。したがって、達成しているかどうかを判断するのは、当然難しい。仮に、「XXXの処理速度が YYY ミリ秒以下であること」と明確だったとしても、その処理速度を長時間にわたってテストしないと、達成度がわからない。&lt;/p&gt;
&lt;p&gt;一方、納期は、カンタン。「3月31日までに納品完了」と決めていれば、それまでに納品されていればOK, そうでなければダメ。小学生でも判断できる。&lt;/p&gt;
&lt;p&gt;要するに、評価する管理者に都合がいいから品質が犠牲になる、というわけ。&lt;/p&gt;
&lt;p&gt;繰り返すが、品質を犠牲にして納期に間に合わせても、顧客は絶対に満足しない。なので、「品質向上に成果に対して報いるメカニズム」が必要となるのである。&lt;/p&gt;
&lt;p&gt;最後にもう一度。&lt;/p&gt;
&lt;p&gt;「品質は全てにおいて最優先の事項」&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ソフトウェア開発201の鉄則 原理172</title>
        <link>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86172/</link>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
        
        <guid>https://rochefort8.github.io/p/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA201%E3%81%AE%E9%89%84%E5%89%87-%E5%8E%9F%E7%90%86172/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>

,noteUrl,nnn,publishAt,body
0,https://note.com/rochefort10/n/n8fcd7f4bff88,父親のPTA活動奮闘記 Vol #3 ~ ママさんのパソコン操作,2022-04-02T14:49:14+09:00,"PTA活動は、年に二度の会報作成と発行をやる「会報委員」の副委員長で始まった。ママさんメインのPTA活動で、自分の居所とか立ち位置あるんかな、と、ものすごく不安に思ってのスタートだったが、全くもって杞憂だった。それは、一瞬で決まった。

諸々のパソコン作業。

失礼な言い草なんだけど、ママさんたち、いわゆる「パソコン音痴」だらけ。断っておくが、決してけなしたり、バカにしているいる訳では、ない。普段使わないんだから、仕方ない。

おれは一応エンジニアで、業務で一日十時間くらいパ"
1,https://note.com/rochefort10/n/n95030bcf7753,父親のPTA活動奮闘記 Vol #2 ~ 黒一点,2022-03-27T19:43:04+09:00,"紅一点の反対語。あまりポピュラーな言葉ではないようだ。PTA活動は、典型的な「黒一点」の世界。

高校生になって以来三十年以上、男が圧倒的に多い集団で過ごしてきた。男が圧倒的に多い進学校で男子クラス。大学は工学部。そしてメーカーで研究開発部門。もう圧倒的に男性が多い環境で、職場なんかは男60人に秘書さん一人なんてこともあった。

PTAの集団は、それが一気に、逆。初の会合に行ったら、ママさん40人くらいに、男性は自分と、PTA会長（なぜか会長は男性なんですね）の、二人だけ。
"
2,https://note.com/rochefort10/n/n2b969b0624ee,父親のPTA活動奮闘記 ~ はじめに,2022-03-22T21:55:58+09:00,"卒業した。長男が高校を。同時に、父親のオレがPTA活動を。

三年前。訳あって、ヤツの高校のPTA活動を勤めざるを得なくなった。ヤツが中学校を卒業するまで、授業参観や面談、学校の行事には積極的に参加していたけど、PTAだけは、逃げ回ってていた。

そりゃそうだろう。そもそもママさんの世界だし。そのママさんだって疲弊するくらいの面倒臭い世界らしいし。とにかく、いい話を聞いたことがない。だから、ヤツの高校でやらざるを得なくなった時は、ホンマに戦々恐々だった。

先に言ってしまうと"
3,https://note.com/rochefort10/n/ne804db67a4c9,ソフトウェア開発201の鉄則 原理109:コーディング:原理100:構造化されたコードは必ずしもよいコードではない,2020-05-27T08:46:23+09:00,"要旨* 構造化プログラミングは、もともとは、プログラムの正しさをカンタンに確かめることができるように提唱されたものだ
* 今では、そのときに定義された条件分岐やサブルーチンなどを使うこと自体が構造化プログラミングと呼ぶようになった
* プログラムをわかりやすくする、という点で、構造化プログラミングは必要だ
* しかし、それは「高品質なプログラミング」の一部の要素であって、十分条件ではない

解説1969 年に、ソフトウェア工学ではしばしば名前の出てくるDikstra さんが提"
4,https://note.com/rochefort10/n/n5b06a2ed5edd,ソフトウェア開発201の鉄則 原理109:テスティング:自分のソフトウェアを自分でテストするな,2020-05-24T09:13:19+09:00,"要旨* デバッグやリグレッションテスト、確認のための単体テストといったもの以外の、本格的なテストをソフトウェア開発者は自分で行ってはならない
* テストというのは、バグが見つかって欲しくないと願う開発者に対し、バグを見つける、という行為なので、自分で行ったら正しくできるはずもないからだ
* そして、テスト担当者は、発見したバグを皆の前にさらして、開発者の面子を潰すようなことをしてはならない
* テスティングというのは、バグがでないことを期待する開発者に対し、精神的に追い打ちを"
5,https://note.com/rochefort10/n/n5d8b52151204,ソフトウェア開発201の鉄則 原理75:設計:保守が容易なように設計せよ,2020-05-23T10:25:27+09:00," 要旨*ソフトウェアで最もコストがかかる工程は、「保守」である
* なので、保守が容易となるように設計をせよ
* その方法に、一般的なものはない
* 例えば、基本構造の選択時に、アルゴリズムやコードの選択よりも保守性を重視する、といったことが挙げられる

解説ソフトウェア「以外の」製品、要するにハードウェアは、設計後最も費用がかかるのは、「生産」。なので、ハードウェア設計の際に一番考慮しなくてはならないのは、生産性。

ソフトウェアの場合、生産にはほとんど費用がかからない場合"
6,https://note.com/rochefort10/n/n5e1856d6dd89,ソフトウェア開発201の鉄則 原理126:コーディング:エラーを個人のものにするな,2020-05-22T09:36:14+09:00,"要旨* ソフトウェア開発というものは、本来は、人類未踏の「詳細さ」「完璧さ」を求める行動である
* なので、（間違いがつきものの人間である）開発者は、完璧さを求めるのではなく、エラーが発生することを前提に、継続的な改善ができるように努力すべきである
* そのためには、エラーが発生したら、それを隠すことなく、オープンにして皆で共有しよう
* それは開発者全員の知見に繋がり、継続的な改善の工場に繋がる

解説この原理、二つ、大事なことを言っている。

1. 間違いが一つもない、完"
7,https://note.com/rochefort10/n/n0e392f557dab,ソフトウェア開発201の鉄則 原理76:設計:エラー修正が容易なように設計せよ,2020-05-20T10:45:10+09:00,"要旨* どんなに経験を積んでも、ソフトウェア開発では必ずエラー（失敗）を起こすものだ
* なので、ソフトウェア設計には、エラー発生時にその発見と修正が容易となるような方法を組み込むこと
* その実現は難しいが、例えば、変数の正当性のチェックは端折らずすべてやるとか、不可能な条件を想定しその施策を机上で練る、といったことが挙げられる
＊システムの不具合を体系立てて分析し、未然の改善を助けるための「フォレストツリー解析」もその一助となるだろおう

解説人はどんなに習熟しても「エラ"
8,https://note.com/rochefort10/n/n4b1be23a5cf2,ソフトウェア開発201の鉄則 原理147:管理:非現実的な完成予定日を設定するな,2020-05-17T10:09:32+09:00,"要旨* 非現実的な納期(==無茶な計画）の設定は、社員の士気の低下、離職といった悪影響をもたらし、これらの発生によってさらに納期が遅れる、といった負のスパイラルを発生させる
* ソフトウェア開発のプロジェクトの大帝が、このような「きつい日程」の計画のもと進んでいるだろう
* そのような状況下での開発では、日程を間に合わせようとして品質の維持は後回しにされがちである
* いいことは一つもない、プロジェクトを成功させたいなら、無謀な納期の設定はするな

解説ほとんどのソフトウェア"
9,https://note.com/rochefort10/n/nea3f5513a02b,ソフトウェア開発201の鉄則 原理114:テスティング:半分のエラーは15%のモジュールで発見される,2020-05-16T08:45:40+09:00,"要旨* エラーの発生箇所は、システム全般で均一ではなく、大きく偏るものだ
* エラーの8割がモジュールの5割から見つかるとか、もっと極端に8割のエラーが2% のモジュールから見つかった実例もある
* エラーが見つかったところには、さらにエラーが見つかる確率が高い
* なので、モジュール毎のエラー発生箇所を記録せよ、それは、システムの欠陥位置や欠陥内容を特定するのに役立つ

解説パレートの法則「全体の数値の大部分は、全体の構成のうちの一部が生み出している」、ソフトウェアの世界で"
10,https://note.com/rochefort10/n/n2e9575689529,ソフトウェア開発201の鉄則:原理125:テスティング:エラーの原因を分析せよ,2020-05-15T09:03:14+09:00,"要旨* ソフトウェアでエラーが発生すると、その検出と修正には大きなコストがかかる
* なので、最初からエラーがないようにすることを目指すべきである
* その実現で有効な方法は、エラーが発生したときに、なぜそのエラーが発生したかの詳細を分析して明らかにし、それを開発者全員と共有することだ
* そうすれば、同じタイプのエラーが発生する確率は減るだろう

解説ここでいう「エラーの原因分析」とは、

「なぜエラーが発生したのか、そのエラーを防ぐにはどうしたらよかったのか」を突き止める"
11,https://note.com/rochefort10/n/n54d7e7e7768c,ソフトウェア開発201の鉄則 原理185:進化:ソフトウェアは変化し続ける,2020-05-14T10:25:48+09:00,"要旨* ソフトウェアのシステムは、使われれば使われるほど、追加機能や変更点が生まれてくるものだ
* なので、どんなソフトウェアでも、継続的な変更（＝＝変化）が発生するものだ
* その継続的な変化は、最初から作り直すまで、ずっと続く

解説「ずっと変化し続ける」というのは、「ずっと使われ続けている」ことの証でもある。変化に対応しなくてなならないコストと引き換えではあるが、喜ばしいことだ。

昔の組み込みソフトウェアでは、最終リリース版を、内容を書き換えることのできない「マスクR"
12,https://note.com/rochefort10/n/ne53c12bb9da0,ソフトウェア開発201の鉄則 原理138:管理人は思いもよらない動機で仕事をしている,2020-05-13T08:32:17+09:00,"要旨* 他人がどんな同期で仕事をしているかは人それぞれで、自分とは決して同じではない
* そして、人の動機付けになっていることを知るのは、むずかしい
* なので、管理者として開発者の動機づけのための行動も、難しい。ある人には効いても、ある人にはうまくいかないこともある
* 人の動機の内容をよく知るには、人の話をよく聞くことだ

解説実際に私の周囲にいたソフトウェア開発者に聞いた、「仕事の動機」を挙げてみる。

* モノづくりが好き
* 他人に出来ない専門的な技術を活かせること"
13,https://note.com/rochefort10/n/nd428e17f433a,ソフトウェア開発201の鉄則 原理111:テスティング: テスティングは結果の存在をあらわにするだけだ,2020-05-12T08:49:50+09:00,"要旨* テスティングは「欠陥を発見」するためのものである
* テスティングは、「欠陥がない」つまり「正しい」ことを証明するものでは、決して、ない
* テスティングを重ねた結果欠陥がない場合、「正しい確率」は確かにあがるが、それは「正しいことの証明」には決してならない
* 正しさを証明するのは、テスティングではない、別の手法が必要

解説「悪魔の証明」をご存知だろうか。ある事実・現象が「全く無い(無かった)」というような、照明するのが非常に困難な命題を証明することだ。

「ある"
14,https://note.com/rochefort10/n/n59b90ce1e98b,ソフトウェア開発201の鉄則 原理129:管理:読んだことのすべてを信じるな,2020-05-10T19:23:03+09:00,"背景* 人は、自分の信じることを支持する情報やデータを集めたがるものだ
* なので、「この手法で生産性は95% 上がる」といった情報は、その情報の発信人の支持するデータや情報で説明されていることがあるので、一意に信じてはいけない
* このような極端な意見は、実際にあったが例外的な事象であることがほとんどだ
* なので、見聞きした情報は、盲目的に信じるのではなく、きちんと裏を取ってから受け入れよう

解説まぁ、なんと。世の中、この手の情報が溢れていることよ。

この書籍が出版さ"
15,https://note.com/rochefort10/n/nbe35edeec6fe,ソフトウェア開発201の鉄則 原理128:管理:適切な解決策を用いよ,2020-05-09T19:52:31+09:00,"要旨* 技術の問題には、技術的な解決策が必要
* 管理の問題には、管理的な解決策が必要
* 政治の問題には、政治的な解決策が必要
* 問題に対して、適切な解決策を施そう。マッチしない解決策では決して解決しない

解説何か問題が起きたら、解決しようとする前に、問題を的確に捉えた上で、正しい、あるべき解決策は何か、をまず明確にするようにするといい。

仮に、それが非現実的でも、いい。まずは、「あるべき姿」を明確にしよう。

で、次に、現実その正しい解決策が取り得るか、を検討しよう"
16,https://note.com/rochefort10/n/n08b152e0c01d,ソフトウェア開発201の鉄則 原理92:コーディング: 人のことを第一に考えてプログラムを書け,2020-05-08T08:36:44+09:00,"要旨* コンピュータ誕生の初期は、そのパワーは貧弱でかつ高価だったので、ソフトウェア開発は、リソースを効率的に使うような、数行の命令でさえ削るようなアプローチが重視された
* が、技術が進化した今、その価値観は変化した。重視すべきはソフトウェアを「開発」「保守」「機能拡張」することである
* そのためには、最初のソフトウェア開発者は、後の保守を行う開発者のことを重視しなくてはならない
* そのためには、リソースを効率的に使うのも大事だが、それと同じくらい、プログラムの「読みや"
17,https://note.com/rochefort10/n/nb3514b49dc89,ソフトウェア開発201の鉄則 原理107:テスティング: テスト項目を要求項目と関係づけよ,2020-05-06T10:18:25+09:00,"要旨* 「テスト項目」は、対応する「要求項目」に紐付けして管理せよ
*  テスト項目が要求項目をどの程度カバーしているか、どの要求項目に対するテストが実行済みかがわかり、そして、要求項目の優先度がそのままテストの優先度になるからである
* その紐付けやテスト実行結果を記した一覧表を作成して管理しよう

解説テストコードは、おそらくほとんどの開発者が「機能」「性能」に対して書くだろう。なので、テスト項目は、ソフトウェアが持つ機能や性能と紐付けられる。

ある面、これは正しい。た"
18,https://note.com/rochefort10/n/n226fd33ef476,ソフトウェア開発201の鉄則 原理94:コーディング: 速くする前に正しいものにせよ,2020-05-05T10:25:45+09:00,"要旨* ソフトウェアを「早く動かす」のと「正しく動かす」のは、早く動かす方がずっとカンタンだ
* だが、最初に達成すべきは「正しく動かす」ことなので、それを優先させよ
* ソフトウェアの開発は、大抵は日程に追われてプレッシャーがかかる状態で進むものだ
* そのような中、正しく動くソフトウェアが予定通りできたら、それは祝福するに値することだ

解説*「正しく動く」までは、早く動かすためのことは一切気にせず、正しく動かすことに注力せよ

* 正しく動くようになってから、早く動かす"
19,https://note.com/rochefort10/n/n8b4b33c5ea39,ソフトウェア開発201の鉄則 原理52:要求:	どの要求項目にも識別に番号を付けよ,2020-05-04T10:13:16+09:00,"要旨* 要求仕様書の各項目は、後から容易に辿れるようにしておこう
* 後の工程の設計時に、要求項目を追跡をすることが多々あるからである
* 要求項目に固有の識別番号をつけるとか、予約語（shall とかmust とか）を用いた検索結果で索引を作るといったことが方法として挙げられる

解説整理をしてナンバリングをするとか、索引をつけるといった、読みやすい、後から辿りやすい文章を作成しておいて、今だったら、「リンクを設けよう」ということになるだろうか。

要求仕様書をはじめとした"
20,https://note.com/rochefort10/n/nb1a059fb5ff8,ソフトウェア開発201の鉄則 原理65:設計:カプセル化せよ,2020-05-02T11:14:53+09:00,"要旨* 情報隠蔽(Information Hiding) は、ソフトウェアのテスト、保守をカンタンにする手段である
* 隠すべき情報としては、データ構造・内容、アルゴリズムや設計の内部情報といった、あるモジュールを使う相手にとって「直接関係のない、必要のない」ものが挙げられる
* 情報隠蔽をすることにより、不具合発生時に欠陥として想定される箇所がぐっと少なくなる
* この情報隠蔽の手段を提供するのが「カプセル化」である

解説いきなり「情報隠蔽」という、ただならぬ言葉が出てく"
21,https://note.com/rochefort10/n/n44d585d15f24,ソフトウェア開発201の鉄則 原理134:管理:部下を信頼せよ,2020-05-01T15:57:37+09:00,"要旨* 部下を信頼すれば、信頼するに足る仕事をする。信頼しなければ、信頼されていないだけの仕事しかしない
* お互いの信頼関係は、うまく管理し生産性を高めるには必要不可欠なものである
* 部下の頼みは可能な限り受け入れよう、そして「いいヤツ」になろうとしよう
* それは、突発的に部下にタスクをお願いするような状況になった時に役に立つものだ

解説管理の原則なので、マネージャが「部下に対して」という話だが、開発者にとっては「プロジェクトメンバ」とか「チームメイト」だろう。

お"
22,https://note.com/rochefort10/n/n895b9682e99d,ソフトウェア開発201の鉄則 原理51:要求:簡明に書け,2020-04-30T09:31:57+09:00,"要旨＊要求仕様書は、わかりやすい文章で書こう

解説やばい。頭いたい（笑

この原理の例。

「目標追跡機能は、すべての動いている目標の当該地点での追跡座標を画面上に表示する能力を備えなければならない」

わかりやすくした例。

「追跡に関して、システムはすべてのアクティブな目標の現在の位置を画面上に表示しなければならない」

確かに。前者は、何言ってるんだか、わからない。

簡潔な文章で書くには、訓練が必要。いくつも、伝わりやすい文章の書き方を指南してくれるサイトがあるので"
23,https://note.com/rochefort10/n/n5447186e2bb3,ソフトウェア開発201の鉄則  原理95:コーディング:コードを仕上げる前にコメントを加えよ,2020-04-29T09:24:00+09:00,"要旨* プログラム実行を与えないことを理由に、ソースコード中にコメントを書かないプログラマがいる
* が、ソースコードのコメントは、後に容易にデバッグ、テスト、保守、進化をさせるのに役立つものだ
* なので、コーディング中には、こまめにコメントを書き加えよう

解説これは、ほとんどのソフトウェア開発者が、わかっていることだろう。頭では。

それでも、どうしても手間が先に立ち、億劫になってしまうものだ。ソースコードは書かなければ、所望の動きにならないから端折れない。一方、コメン"
24,https://note.com/rochefort10/n/nd12f9fdb5392,ソフトウェア開発201の鉄則 原理50:要求:要求に優先順位をつけよ,2020-04-28T06:04:28+09:00,"要旨* 複数の要求項目は、全て平等ではありえない
* なので、要求項目に優先順位をつけよう
* 仕様書の各項目に優先度を明記する欄を設け、Mandatory / Desired / Optional といった優先度がわかる表記をしよう

解説この原理では、宇宙船システムに搭載する「インスタント・ドリンク」と「生命維持装置」が要件の例として上がっている。どちらが重要かは一目瞭然。

流石に、「優先順位をつける」こと自体は、ソフトウェア開発の現場に深く浸透しているようだ。あまり、"
25,https://note.com/rochefort10/n/ncc30956903e1,ソフトウェア開発201の鉄則 原理105:コーディング: プログラムの体裁を整えよ,2020-04-27T08:42:38+09:00,"要旨* プログラムの読みやすさ、理解しやすさは、インデントを整えることで大きく改善される
* コーディングルールを適用しよう。どれを選んでもいいが、決めたら一貫して使おう
* 一貫性のないインデントもよくないが、さらに、「間違った」インデントは理解の間違いなどの悪影響を及ぼす
* 整ったインデント、見てインデントの状態がわかりやすいエディタ、ツールを活用せよ

解説if 文のような分岐があるもののロジックを、ソースコードを眺める開発者は、コードの開始位置、つまりインデント位置"
26,https://note.com/rochefort10/n/nc567193f41e6,ソフトウェア開発201の鉄則 原理43:要求:なぜこの要求項目が含まれたかを記憶せよ,2020-04-26T09:50:48+09:00,"要旨* 要件は、いくつもの活動が積み増さなって決定されるものだ
* そのようないくつもの活動と、その結果を、一つの要件の背景として記録すること 
* 後に要件変更が発生した時に、その要件を決定するに至った過程と整合性をとルためである
* 決定のために参照した文献へのポインタ、議論の議事録といったものを記録すること。これが、一つの「進化する」要件のために必要な活動である

解説「あれ、これ、誰が決めたんだけ？」と後から首を捻る要件、ありますね。

この原理の「要求」の項目にいく"
27,https://note.com/rochefort10/n/nf1afbbf6adb6,ソフトウェア開発201の鉄則 原理42:要求:プロトタイプはユーザー・インタフェース選択のリスクを減らす,2020-04-22T09:17:47+09:00,"要旨* ユーザ・インターフェイス(UI) の要件具体化には、プロトタイプが最適だ
* 実際にプログラムを書かなくとも、画面遷移だけ示すだけで充分。「電子紙芝居」を作って見せよう
* これは、要求を明らかにすることに加え、顧客、ユーザへのアピールにも役立つ

解説ユーザ・インタフェースは「見えるもの」だ。なので、「見せよう」。そういう話と考えれば、いい。

描画ツール、レイアウト作成のツールは無数にある。PowerPoint でも充分だろう。

モバイルアプリを作ったときは、ユ"
28,https://note.com/rochefort10/n/nf28076006389,ソフトウェア開発201の鉄則 原理40:要求:要求について今できることは何でもやれ,2020-04-20T09:07:52+09:00,"要旨* 要求、要件定義は、理解しづらく、難しいものである
* だからといって、要件定義をいいかげんにやったら、後に必ず痛い目にあう
* なので、要求について理解したり、明快したりするための行動は、今すぐなんでもやり、得たものは要求仕様書にまとめよ
* 決まらないなら、後の変更を想定した柔軟な計画にしてもよい

解説要求は理解するのが難しく、規定するのも難しい。

この一文につきる。

要求は顧客、ターゲットとの密なコミュニケーションを要するステージ。つまり、「人」が相手といっ"
29,https://note.com/rochefort10/n/nc7f744847e7b,ソフトウェア開発201の鉄則  原理101:コーディング:深い入れ子を作ってはいけない,2020-04-18T09:14:44+09:00,"要旨* if文を入れ子（ネスティング、nesting) すると、論理構造はシンプルになる
* が、入れ子の段数（深さ）を3以上にすると、理解しにくくなる
* 入れ子の深さを減らすための技法を適用しよう

解説良いコーディングの基本原則「読みやすい」。ネスティングも、ある段数以上いくと、論理構造を追跡するのが途端に難しくなる。それに、エディターの右に寄って見づらくなる、というのもある。

その段数は、いろんな文献や意見を見ると「3段」のようだ。

ネストを減らすための技法は、こ"
30,https://note.com/rochefort10/n/ne8eec3586514,ソフトウェア開発201の鉄則  原理41:要求:いますぐ要求仕様書の誤りを直せ,2020-04-16T10:29:33+09:00,"要旨* 要求仕様の誤りは、発見するのが遅れれば遅れるほど、高い代償を払うことになる
* 誤りが設計段階まで残っていたら、それを修正するのに5倍のコスト、コーディングまで残っていたら10倍、テスティングまで残っていたら20倍、、といった具合
* なので、気づいたら、先送りせず、今すぐ修正にかかれ

解説問題は、仮にそれが軽微なものだったとしても、先送りすればするほど、大ごとになる可能性が高い。

ソフトウェアの開発でも、同じこと。工程の後のほうで判明したら、その前の、前の前の工"
31,https://note.com/rochefort10/n/nbc9d0f037ab6,ソフトウェア開発201の鉄則 原理37:責任をとれ,2020-04-15T10:39:53+09:00,"要旨* 工学分野では、設計が失敗したときは技術者が避難される
* が、ソフトウェア工学の分野では、めったに開発者は避難されない
* 技術者としての責任範囲を全うすること
* 採用した手法、管理者、日程のせいにしてはいけない

解説「ソフトウェア工学の分野では、めったに開発者は避難されない」

ホンマかなぁ。マネージャがマネジメントとしての責任を全うせずに、技術者のせいにするシーン、たくさん見かけたけどなぁ。

ちなみに、良く言われる原則。

うまくいかなかったときは、最大の要"
32,https://note.com/rochefort10/n/n82100eeddf61,ソフトウェア開発201の鉄則 原理36:研究がおわってからの技術移転はうまくいかない,2020-04-15T10:15:41+09:00,"要旨* ソフトウェアの研究成果で、実際に役に立ったのは、ごくわずかなのが現実だ
* うまくいかないのは、研究者が経験がないとか、研究者と開発者で使う語彙が違うといったことに起因する
* 研究から現場への技術移転で成功した事例は、研究開始の当初から現場と密な連携から生まれている
* 現場は、研究のアイディアを、完成してからでなく、途中で確かめるためのもの、とくらいに考えるとうまくいくだろう

解説ソフトウェアに限らず、工学の分野は、上流から

研究⇒開発⇒事業⇒保守・運用

と"
33,https://note.com/rochefort10/n/nb729e84c25cf,ソフトウェア開発201の鉄則 原理35:一般:同じ概念には同じ言葉を使え,2020-04-14T09:05:56+09:00,"要旨* 同じ概念、同じ意味を表す言葉は、常に同じものを使うべきである
* 文章構造もしかり。同じ表現には同じ構造を用いるべき
* 例えば、「2つのタイプ」と書いたあとに、「4つの形」と書くのではなく、4つの「タイプ」と書くべきである
* 要求仕様書、設計文書、コメントといったすべての文書にこれを適用すべきである

解説ダメな例、ここにあります（苦笑

このシリーズ、ソフトウェア開発者といったり、技術者といったり、エンジニアといったりしている。

違うものを指すののであれば仕方"
34,https://note.com/rochefort10/n/n7300cc433481,ソフトウェア開発201の鉄則 原理34:一般:どの文書にも索引が必要だ,2020-04-13T13:28:45+09:00,"要旨* ドキュメントには、文中に使用されている用語と、それらが使われている場所を示すリストである「索引」が必要である
* 読み手からしたら当然だが、作成者はそのことを忘れがちである
* ドキュメント中の情報の素早い検索、後の保守運用には索引は必須である
* 文章作成ツールの索引作成機能を有効に活用しよう

解説原理33「どの文書にも用語集が必要だ」と、言いたいことは一緒だろう。

読み手のことを考えて文書を作成しよう。

実は一度も自分が作成したドキュメントの索引を作成したこ"
35,https://note.com/rochefort10/n/n4e003acfbd5f,ソフトウェア開発201の鉄則 原理33:一般:どの文書にも用語集が必要だ,2020-04-12T10:26:37+09:00,"要旨* ソフトウェア工学の世界には、すぐに理解できない、専門用語がたくさんある
* そのような専門用語の解説がある「用語集」を必ず文書に儲けよう
* 用語の定義は、「調べる手間を最小」とするように書くべきである
* 「可能な限り一般用語を使う」「説明が必要な用語は文中でイタリック体で示す」といったことが挙げられる

解説文書に限った話ではない。他の工学の分野と同様、ソフトウェアの世界にも、その世界に精通しているものだけがわかる用語が、たくさんある。

そして、すごい勢いで進化"
36,https://note.com/rochefort10/n/nae2eaf5f1343,ソフトウェア開発201の鉄則 原理32:一般:文章化規格を使え,2020-04-11T08:00:03+09:00,"要旨* 文章化（ドキュメント）には規格がある。
* その規格は、体型だった、組織だった文章作成のガイドラインを提供している
* そのガイドラインを使用し、その上で独自の記述を行え
* 規格には、「明快な文章で書く」「文章階層の定義」と言ったものが含まれる

解説このようなものを指すのだろうか。

Systems and software engineering — Requirements for designers and developers of user docume"
37,https://note.com/rochefort10/n/n18e6d73aeb1d,ソフトウェア開発201の鉄則 原理31:一般:新技術を無視するな,2020-04-10T08:42:41+09:00,"要旨* ソフトウェアの技術は急速に進化し続けるものである
* 一つの大きな流行りが5年程度、さらにその良いところを取り入れた発展形のはやりが続く、といった具合で進化していく
* この進化についていくための有効な方法として、「適切な書籍・情報源からの情報収集」「適切な人との会話」｢学会への参加｣がある

解説自分のレベルアップのためには、最新技術の知見獲得・習得は必要不可欠だ。これは自明。

しかし、それにしても、進化が早い。この原理に書いてあるくらいなのだから、今に始まった話"
38,https://note.com/rochefort10/n/n731ef4a9e504,ソフトウェア開発201の鉄則  原理30:レミング（一時の流行）は心して使え,2020-04-09T08:48:28+09:00,"要旨* 新しい、流行りの技術や手法は、どんな場合にでも有効では、ない。
* 多くのプロジェクトで使用されているからといって、自分の環境でもうまくいくことが保証されているわけでは、ない
* なので、費用対効果、リスクについて自分の環境で現実的に考え評価してから使え

解説Twitter をはじめとした、強力な拡散力のあるSNSがある時代、「みんなが使っている」 「多くの人がいい、と言っている」といった流行にますます影響されやすくなっている。

莫大な費用をかけた宣伝ではなく、実"
39,https://note.com/rochefort10/n/n611d1d0bc539,ソフトウェア開発201の鉄則  原理29:一般:組織の評価と個人の評価を合わせよ,2020-04-08T08:55:40+09:00,"要旨* ソフトウェアの不具合、バグや成果物のエラーが発見されたときは、担当の開発者は「感謝すべき」である
* 技術的なエラーは隠すのではなく、逆に広く公開すべきである
* エラーを知らしめることは、他の技術者の同様のエラー発生を防ぐ、エラーから知見が得られるといったメリットがある
* なので、組織は、エラーを発生させた開発者を責めるのではなく、相応の評価をしなさい

解説要旨の最後の文章に相当することは、原理には書いていない。きっとこういうことだろう、という私見。

前半に、"
40,https://note.com/rochefort10/n/n9b49c91b3251,ソフトウェア開発201の鉄則  原理141:管理:ソフトウェア技術者の能力差は大きい,2020-04-07T10:30:47+09:00,"要旨* 優秀なソフトウェア技術者と、そうでない技術者の能力差は、とてつもなく大きい
* 生産性だと25倍、品質だと10倍もの違いがある

解説ほんこれ。

思った以上に、いや、はるかに、出来るヤツとできないヤツの能力差は大きい、と思ったほうがいい。

ちなみに、原理の中の生産性は「コード行数/一人月」、品質は「バグ数/1000行」で計測したものとのこと。定量的に示されるとわかりやすい。

ただ、この指標、コードを書く人、つまり設計＋実装をやる開発者についてのもの。

アーキテ"
41,https://note.com/rochefort10/n/n25ba32b1b1b8,ソフトウェア開発201の鉄則: 一般:原理27:目標を達成したらそこで止めよ,2020-04-06T14:50:33+09:00,"要旨* ソフトウェア開発者が使う手法・技法は、二次目標に対応した目的がある
* その目標を達成した時点で、その手法・技法はそれ以上は不要なので使うことを止めよう
* 目標を忘れて手法・技法にのめりこんだり、手法・技法のために目標が変わるのは本末転倒
* ただ、目標達成時点で止めた残りは、本当にやらなくていいかは、全体を見てから判断しよう、その部分が重要となる局面があるかもしれないので

解説この原理、一つの原理でいろんなことを言いすぎ。上記の要旨の、最後の項目は、一旦忘れよう"
42,https://note.com/rochefort10/n/nd512b862397e,ソフトウェア開発201の鉄則: 一般:原理26:「いつ使うかを知る」ことは、どう使うかを知ることと同じくらい重要だ,2020-04-05T10:35:22+09:00,"要旨* ソフトウェア開発の手法・技法自体の「正しさ」を論じることには意味はない
* どんなによい手法・技法も、それら適したタイミングで使われてこそ、本当に役立つものとなる
* いくつもの多様な手法・技法を知っていて、かつそれらをどのタイミングで使ったらいいかを熟知しているのが、優れた開発者である

解説「内容」だけでも「やり方」だけでも不十分。優れた内容のものを、適切なやり方で、適切なタイミングで使って、「素晴らしい成果を出す」ことに意味がある。

よく、「技法自体」や「やり"
43,https://note.com/rochefort10/n/n9602a6b1c659,ソフトウェア開発201の鉄則: 一般:原理25:CASEツールは高価である,2020-04-04T17:15:50+09:00,"要旨* CASE 開発環境は高価だ。導入時に10000ドル/人、年間の運用コストで3,000ドルくらいするだろう
* しかし、ソフトウェア開発では、この費用は必要経費と捉えるべきである
* この必要経費を回収する計画を立てよ
* 導入しない場合に発生した、修正、リリース遅れと言ったコストは、導入した場合より、きっと高くつくであろう

解説CASEツールとは、ソフトウェアの開発の各フェーズのタスクを効率化、自動化するツールや環境のことである。一時期、「統合CASEツール」と言う"
44,https://note.com/rochefort10/n/nffb129cdb430,ソフトウェア開発201の鉄則: 一般:原理24:ソフトウェア・ツールを優れた技術者に与えよ,2020-04-03T09:59:44+09:00,"要旨* 優秀なソフトウェア開発者が良いツールを使うと、生産性は大きく高まる
* が、良いツールを使うとソフトウェアが優秀になるわけでは、決してない
* 出来のよくないソフトウェア開発者にツールを与えると、出来のよくないソフトウェアを量産しがちなので、かえってたちがわるい
* よって、良いツールは「優秀なソフトウェア開発者だけに」与えよ

解説出来悪いソフトウェア開発者が、劇的に出来が良くなるツールがあるんだったら、だれも苦労しないわな。そんなん、あるわけない。

それはわかっ"
45,https://note.com/rochefort10/n/n2c466712338d,ソフトウェア開発201の鉄則: 管理:原理161:上位10のリスク項目を知れ,2020-04-02T08:12:58+09:00,"要旨* 管理者は、ソフトウェアの問題・課題が発生する状況についてきちんと知ってこくべきである
* 「人材不足」「無茶な日程」「要求仕様がいい加減」この３つが、最も起き得る問題・課題を発生させる状況だ
* このようなリスクが発生することを前提に、その回避策を計画せよ

解説要旨には上位３つを書いたが、１０個は、以下のようになる。

1. 人材不足
2. 非現実的な日程
3. 要求仕様の不理解
4. ユーザ・インタフェースが貧弱
5. 顧客が望まない過剰な機能搭載
6. 要求仕様"
46,https://note.com/rochefort10/n/n5c52c0cec96c,ソフトウェア開発201の鉄則: 一般:原理23:ツールを使え、ただし現実的に,2020-04-01T17:24:54+09:00,"要旨* ソフトウェア・ツールは、効率化に有効なものなのでうまく使おう
* 統合開発環境(IDE)のようなツールは、開発者にとって必須のツールである
* このようなツールは、生産性を10~25%,継続的開発を25~50%程高める
* ただし、最も困難な「考える」ことは、ツールにはできない。そのことを心して使え

解説ここで言っているツールは、原文では、""CASEツール""。 この書籍が出版されたころはトレンドだったのだろう。さすがに、今の時代、これはないので、統合開発環境(IDE"
47,https://note.com/rochefort10/n/nd3ead6b85dd7,ソフトウェア開発201の鉄則: 原理22:一般:ツールを使う前に技法を学べ,2020-03-31T09:44:37+09:00,"要旨* ツールは便利だが、使い方や効果を知らないで使うのは危険である
* ツールを使う前に、技術や使い方をまず学び、訓練を受けよ
* ツールでやりたいことを、まずは「手動で」やってみて、ひととおり理解してうまく動くことを確認するのがよい、手動でできなければツールでもできない

解説ツールを盲目的に信じるな
ツールは技術の穴埋めをするものではない
ヘタに使うと、かえってひどいことになる

ツールは、上手に使えば大変便利なものなので、ちゃんと知った上で使いましょうね、ということ。"
48,https://note.com/rochefort10/n/n75beadb9be4d,ソフトウェア開発201の鉄則: 原理21:一般:異なるフェーズには異なる言語を,2020-03-30T09:52:43+09:00,"要旨* ソフトウェアが持つ本質的に複雑な世界に対して、「単一の」開発法でのアプローチを試みようとする開発者が多い
* しかし、電気工学など、他の工学分野では、内容やフェーズにに応じて使う表記法や手法があり、それぞれ異なるのが通常である
* ソフトウェアの世界も、他の工学分野と同様、フェーズ、プロセスに応じた手法や表記法があるので、それぞれの適したものを使え

解説これは、そういう時代があったのか、としか言いようがない。

どんな複雑な問題に対しても、どのような場面でも通用する"
49,https://note.com/rochefort10/n/n8e7db9f46a11,ソフトウェア開発201の鉄則: 原理20:一般:仮定を記録せよ,2020-03-29T14:00:24+09:00,"要旨* ソフトウェア開発の各プロセスにおける仕様は、確定した普遍的なものではなくい「仮定」が多くある
* ソフトウェアは置かれた環境は無限であり、このような仮定の存在も無限にある
* その仮定は、開発においてすべて記録せよ、それがどんなに明白なものだったり、明らかに馬鹿げていると思われるものだとしても

解説ちょっと回りくどい気が。多分、こういうこと。

要求、設計、実装、テストのソフトウェア開発のプロセスを進めるのにおいて、明らかにしておかなくてはならない事項がたくさん、無"
50,https://note.com/rochefort10/n/nf86c843e5028,ソフトウェア開発201の鉄則: 原理199:進化:最適化する前にプロファイラを使え,2020-03-28T10:40:37+09:00,"要旨* プログラムでは、８割のCPUパワーが2割のコードで使われているものだ
* なので、その２割を探し出すのが、ソフトウェア実行速度の高速化、最適化で重要
* そのためには、リソース消費を監視する「プロファイラ」を使おう
* 最もCPUを消費する「ホットスポット」見つけ出し、そこだけ最適化すれば良い

解説「どこでCPUを使っているか」が分からなければ、そりゃ、高速化も最適化も、できませんわね。

2割8割、ここでも出てくる。パレートの法則。一般則だが、ソフトウェア実行で実"
51,https://note.com/rochefort10/n/nc72b4f95b1db,ソフトウェア開発201の鉄則: 原理19:一般:どんな複雑な問題にも解決策がある、と思うのは誤り,2020-03-28T10:26:21+09:00,"要旨* ソフトウェアの分野には、魔法のようにすぐに役立つ解決策は、存在しない
* なので、「これこれさえやれば、品質が上がりますよ」という謳い文句は、まず疑ってかかれ

解説原理の文言だけ見ると、誤解しやすい。原文の英語も同様。

ソフトウェアは、解決策が全く存在しないほど複雑になり得る。

と言っているのでは、ない。

どんな場面でも、どんな複雑な問題に対しても解決できる「唯一の」「定型化された」方法はありませんよ。

というのが趣旨。

ソフトウェアの世界でよく言われる「"
52,https://note.com/rochefort10/n/ne7cf8b9ed318,ソフトウェア開発201の鉄則: 原理139:管理:オフィスを静かに保て,2020-03-27T09:26:55+09:00,"要旨* 高い生産性を実現するには、オフィスは静かに保ち、個人空間を確保せよ
* 電話をはじめとした、仕事に関係のない割り込みを遮断しよう
* コミュニケーション促進のために、オープンな、見通しのよい配置にしているオフィスがあるが、これは生産性向上にとっては、よくない

解説高い生産性を生み出すオフィスのレイアウトや環境についての話が主題では、ない。ソフトウェア開発を進めるための環境が主題である。

静かさを保とう。仕事に関係ない割り込みは排除しよう。そして、本職のソフトウェア"
53,https://note.com/rochefort10/n/n02c1b3b3c0e1,ソフトウェア開発201の鉄則: 原理18:一般:ユーザ用のマニュアルが短くて済むようにソフトウェアを作成せよ,2020-03-27T08:17:30+09:00,"要旨* マニュアルが短ければ短いほど、ソフトウェアの品質は良いものだ
* 説明を必要としなくても使えるのが良いソフトウェア。大量のマニュアルは、ソフトウェアの品質をカバーしたりは、しない
* 標準品を用いる、一目でわかるアイコン、慣れ親しんだUX を使う、といったアプローチが挙げられる
* ソフトウェア開発者は、トリッキーなインターフェースのような「特殊な」ものを好み勝ちだが、顧客は、簡潔でわかりやすいものを好むものだ

解説これ、明確に、ソフトウェアの品質を図る指標としてい"
54,https://note.com/rochefort10/n/nd5852983dcce,ソフトウェア開発201の鉄則: 原理17:一般:可能なら開発するより購入せよ,2020-03-26T14:48:19+09:00,"要旨* ソフトウェア開発のコスト削減の最も効果的な方法は、「開発せず購入すること」である
* 既製品のソフトウェアは、所望の要件を満たさないかもしれないが、だからといって一から作ったらその10倍はコストがかかる羽目になる
* 新しいソフトウェア開発にエンジニアは最初は喜ぶが、期限やコストが迫ると次第にトーンダウンするものだ
* なので、できるだけ多くのソフトウェアを「再利用」するべきだ

解説エンジニア、一から作りたがるからなぁ。

はっきり言っておく。一番カネのかかる方法は"
55,https://note.com/rochefort10/n/n8e44e5dfb4e2,ソフトウェア開発201の鉄則: 原理16:一般:開発期間中の変更は避けられない,2020-03-25T18:52:23+09:00,"要旨* システム工学　第一の法則 : システムのすべてのライフルサイクルにおいて、システムは変更される。そして、それは不可避である
*  リリース後にユーザのさらなる要求に加え、リリース前の開発期間中でも変更される可能性はある
* なので、ソフトウェア開発のすべてのプロセスにおいて、変更に柔軟に対応できるようにしておくべきである

解説もう、耳タコかも知れない。ソフトウェアは変更されるものである。というより、変化しながら進化するものだ、と捉えた方が前向きかもしれない。

ソフ"
56,https://note.com/rochefort10/n/n99a34829359d,ソフトウェア開発201の鉄則: 原理15:一般:見れば見るほどもっとよいものが欲しくなる,2020-03-24T18:35:22+09:00,"要旨* 高機能・高性能であればあるほど、顧客はさらにもっと多い・高いものを求めたがるものだ
* リリース後、顧客からたくさんの、そのような要求があることを理解し、管理、技術、プロセスといった面で備えよ
* ドキュメントに変更履歴を記載する、構成管理システムを導入する、ソフトウェアの設計は変更に強くしておく、といったアプローチが挙げられる

解説こ「高機能・高性能であればあるほど」なんですね。たしかに。顧客は、

「今知っているレベルよりより高いものを常に」かと思っていました。"
57,https://note.com/rochefort10/n/n939cf6eda3e0,ソフトウェア開発201の鉄則: 原理40:要求:要求について今できることは何でもやれ,2020-03-23T09:17:57+09:00,"要旨* 要求は、理解するのも定義するのも、難しいものだ。だからといって要求を明らかにし要求仕様書を作ることを端折ってはならない
* 要求に関するより多くの情報を得るためには、「今すぐ」「何でも」やれ
* そして、得たものから導く出したシステムの計画を「要求仕様書」に明文化せよ
* 要求が大きく変わることが予想されるなら、インクリメンタル開発を計画してもいいが、その場合でも各ステップで要求の定義と仕様書の明文化はきちんとやれ

解説それっくらい、要件定義というのは、ソフトウェア"
58,https://note.com/rochefort10/n/n774377731bdc,ソフトウェア開発201の鉄則: 原理14:一般:システムを漸進的に成長させるように計画せよ,2020-03-23T08:45:24+09:00,"要旨* ソフトウェア開発のリスク軽減に最も効果的な方法は、「少しずづ開発を進める」ことだ
* 限られた最小限の機能から始め、それを少しづつ成長させて大きな機能のものとする方法である
* 利点は、各開発段階でのリスクが抑えられること、こまめにユーザのフィードバックが得られること、短所は、元の設計がマズいときは完全な再設計が必要となること
* この短所を減らすための手法が「使い捨てプロトタイプ」である

解説「斬新的（ざんしんてき）」は、Incremental の日本語訳。原本に"
59,https://note.com/rochefort10/n/n98035200158f,ソフトウェア開発201の鉄則: 原理173:製品保証:製品保証,2020-03-22T09:18:14+09:00,"要旨* 製品保証は、ソフトウェアの「構成管理」「品質保証」「検査」「テスト」よりなる
* テストとその評価は、大抵のプロジェクトで必要性が認識されているがそれ以外のものは、予算が十分あるプロジェクトでやる贅沢品と思われている
* （が、そうではなく）製品保証のこれらの要素は、計画通りに想定通りの品質で製品を完成する確率を高める「必需品」である
* プロジェクトの規模、形態に応じて、製品保証の実行形態を調整しよう

解説品質保証のプロセスは、軽視はされないまでも、エンジニアには"
60,https://note.com/rochefort10/n/n92fa9087173f,ソフトウェア開発201の鉄則: 原理13:一般:使い捨て型のプロトタイプは手早く作れ,2020-03-22T08:44:00+09:00,"要旨* 使い捨て型のプロトタイプは素早く作れ
* 簡単な要求仕様書さえあれば十分、品質や体裁は気にしなくていい
* 言語は何を使ってもいい、本番との言語の差分について気にしなくていい

解説とにかく「スピード重視」ということ。

言語は何でもいい、とあるが、もっというと、プログラミングでなくてもいい。モバイルアプリのUX なら、PowerPointで書いたポンチ絵とか、動画でもいいかもしれない。

作る予定のスマホアプリの機能を紹介するのに、Android で画面遷移だけ、画"
61,https://note.com/rochefort10/n/n7dc3aacc05bf,ソフトウェア開発201の鉄則: 原理84:設計:巨額の投資をしなくても再利用ができる,2020-03-21T09:37:04+09:00,"要旨* ソフトウェアの再利用を最も効率的にやる方法は、再利用のためのリポジトリを活用することであるが、コストがかかる
* その代替の方法として「サルベージング」という方法がある
* これは、プロジェクトや組織の他の人にに聞き、類似のものがあれば共有してもらって活用する方法である。
* 長期的には適していないかもしれないが、これも立派に再利用である

解説これは、言いたいこと、２つ。

まずは、リポジトリ。

リポジトリ活用は「時間と資金の両方にかなりの投資が必要である」との記"
62,https://note.com/rochefort10/n/nda948041118d,ソフトウェア開発201の鉄則: 原理12:一般:プロトタイプに適切な機能を組み込め,2020-03-21T09:10:48+09:00,"要旨* 使い捨て型のプロトタイプには、よく理解されていない、要件が不明確な機能「のみ」を組み込め
* 進化型のプロトタイプには、最もよく理解されている、最も明確な機能を組み込め
* いずれも、それぞれの型の目的に沿った機能を組み込むことにより、ユーザからの適切なフィードバックが得られる。

解説原理11「適切な型のプロトタイプを開発せよ」の続き。

プロトタイプは、使い捨てであろうが、進化型であろうが、目的は、「ユーザのフードバックを」「素早く」得るために作るものである。

"
63,https://note.com/rochefort10/n/n256ce3fc6c6f,ソフトウェア開発201の鉄則: 原理137:管理:水運びの仕事をせよ,2020-03-20T15:51:59+09:00,"要旨* 管理者は、ソフトウェア開発者の部下が懸命に仕事をやり遂げようとしてる時は、同じだけ働いて開発の役に立つべきである
* 自ら手本を示すとともに、開発者と同じ境遇に身を晒して、部下のために働こう
* 開発者は、管理者が自分たちのために動いてくれることがわかれば、より積極的に従事しより高い成果を出すであろう
*  開発を直接手伝わなくても、ピザを奢るとか、間接的に開発者が喜ぶことをやろう

解説会社組織でいうと上司、プロジェクトリーダ、プロジェクトマネージャ、課長、部長の、"
64,https://note.com/rochefort10/n/n3a6baf1d1962,ソフトウェア開発201の鉄則: 原理11:一般:適切な型のプロトタイプを開発せよ,2020-03-20T15:32:02+09:00,"要旨* プロトタイプは「使い捨て型」と「進化型」の２つの種類がある
* 「使い捨て型」は、フィードバックを得るために素早く、重要な事項が不明確な時に作られるものである
* 「進化型」は、品質もそれなりに確保され、フィードバックを得た後は修正をされて継続的に進化するものであり、重要な事項は明確だが他の多くのものが不明確な時に作られるものである
* ほとんどの事項が不明確な時は、まず使い捨て型、その後進化型のプロトタイプを作ると良い

解説「要旨」の通り。あえていうなら、

「使"
65,https://note.com/rochefort10/n/n44ba7458a472,ソフトウェア開発201の鉄則: 原理136:管理:うまく話し合う技術は必須である,2020-03-19T09:57:08+09:00,"要旨* プロジェクトで採用する時は、採用候補者の「コミュニケーション力」をきちんと考慮しよう
* チームワーク、会話能力は、（技術的なスキルと同様、いやそれ以上に）重要なものである。
* 相手と会話する、納得させる、よく話を聞く、上手に妥協する、このようなことができるかを重要視しよう

解説腕に覚えがある、技術的には高いもの、豊かな経験を持つが、他人と話すのがうまくない、というエンジニア、本当に多い。

ソフトウェア開発は、一人でやるものではない。二人いたら、もうチームだ。技"
66,https://note.com/rochefort10/n/ndd2590bc4eb3,ソフトウェア開発201の鉄則: 原理10:一般:一つは放棄するつもりでいよ,2020-03-19T09:37:43+09:00,"要旨* アルゴリズム、設計など、なんらかの「新規項目」があるソフトウェアは、最初からうまくいかないことが常である
* 最初のソフトウェアは、その新規項目の設計や方向性が正しいかを検討するためのものであるべきだ
* そして、全体の25% をこのような新規項目の妥当性検討に使うべきである
* 具体的な施策としては、「プロトタイプを作る」「リリース後も定期的にアップデートできるようにしておく」と言ったことが挙げられる

解説新しいものは、最初からはうまくいかない。これは、どの分野で"
67,https://note.com/rochefort10/n/n51a2b419c851,ソフトウェア開発201の鉄則: 原理9:一般:開発者と顧客の見返りを合わせよ,2020-03-18T19:39:55+09:00,"要旨* 開発者と顧客が全く異なる、相容れない目標を持っていたためにプロジェクトが失敗に終わることがある
* 関係者間の異なる目標は容易に調整できるようにせよ
* 「優先度をつける」「要求達成に対する開発者にインセンティブを定義する」「納期が遅れた場合のペナルティーを定義する」と言ったことが、これに当てはまるだろう

解説* 開発者と顧客は、目標は異なるのが当たり前。もっというと、複数の開発チームや複数の顧客、管理者と言った、多くの関係者（ステークホルダー）がいるプロジェクトだ"
68,https://note.com/rochefort10/n/n46712f028610,ソフトウェア開発201の鉄則: 原理67:設計:単純に作れ,2020-03-17T09:05:05+09:00,"要旨* 高い保守性を保つには、基本構造やアルゴリズムは「単純」であるべき
* コンポーネント、モジュール分割の時は、人は5~7つ以上のことを把握するのが難しい、ということを念頭に置こう

解説ソフトウェアの設計には２つの方法がある。

1. 欠陥がないことが明らかなほどに単純にする
2. 欠陥が見えないほど複雑にする

本文より。なんと皮肉な。

「シンプルに考える」は、どんな場面でも必要なこと。

問題や状況を単純に考えることができるか、複雑ならば分解して単純にできるか、人"
69,https://note.com/rochefort10/n/n37960de7afd2,ソフトウェア開発201の鉄則:  原理8:一般:顧客やユーザとよく話し合え,2020-03-17T08:43:08+09:00,"要旨* 真のニーズを獲得する唯一の方法は、プロジェクトの最重要人物である顧客とよく話し合うことだ
* 開発にあたり、早い段階で顧客を巻き込もう
* 製品のプロトタイプを早い段階で収めるとか、ロールプレイをやるとか、顧客に早い段階でプロジェクトに参加してもらう手段を取ろう

解説本文には、さらに、

開発者にとっては、顧客と頻繁に話をせず、誰にも干渉されずに開発を進める方が気楽かもしれないが、そのような進め方をして最終的に出来上がったものを、顧客が本当に臨むだろうか。

と言っ"
70,https://note.com/rochefort10/n/n26c27c09fb6f,ソフトウェア開発201の鉄則: 原理89:コーディング:トップダウンで読めるように書け,2020-03-16T07:59:09+09:00,"要旨* 最初の行から最後の行に向かって読めるように、プログラムを書け
* プログラムの概要と外部仕様が先頭
* その次が外部からアクセスする変数、関数の定義
* 以降は構造化された基本構成にしたがって

解説文章を読むときは、上から下に読むのが常。プログラムも、「文章」だと思って記述しよう。

プログラムといえど、開発者の都合や時間制約でなく、読む人の理解しやすさ最優先で書きなさい、という原理。

外部関数と内部関数はどちらが先に書くべきか。これは宗教論争となりそうで、どっち"
71,https://note.com/rochefort10/n/n2f096fe631f4,ソフトウェア開発201の鉄則:  原理7:一般:製品のプロトタイプを早めに顧客に納めよ,2020-03-16T07:37:45+09:00,"要旨* 真の顧客のニーズを得るための最も効果的な方法は、製品のプロトタイプを提供して使ってもらうことである
* ウォーターフォールモデルの手法だと、顧客への最初の納品は、最後の工程の、開発資源をほぼ使い切った時に行われる
* 一方、資源の20%程度が消費されたくらいの段階ででプロトタイプを作成し顧客のフィードバックを得る方法（アジャイル開発とか）もあり
* この方法だと、顧客のニーズをより明確に知ることもできるし、開発の方向性も早い段階で正しいものにすることができる

解説百"
72,https://note.com/rochefort10/n/n4f102d125a4d,ソフトウェア開発201の鉄則:  原理6:一般:信頼性の低いソフトウェアは性能が悪いソフトウェアより手に負えない,2020-03-15T10:24:28+09:00,"要旨* 性能が良くないソフトウェアは、良くない部分だけ切り離して新しく設計し直す、といった対応が可能
* 一方、信頼性が良くないソフトウェアは、その発見が難しくかつ修復するのも困難なものである
* かつ、信頼性の低いシステムは、致命的な問題を発生させる可能性もあり、タチが悪い

解説「信頼性」も「性能」な一部の気がしますが。多分、ここでいう「性能」と「信頼性」の違いは、「不具合の再現頻度の高低」ではなかろうか。

発見できて、原因がわかれば、対応は可能。しかし、数年経って気づ"
73,https://note.com/rochefort10/n/na08cd0a961dd,ソフトウェア開発201の鉄則:  原理85:設計:「ガーベッジ・イン、ガーベッジ・アウト」は正しくない,2020-03-15T10:13:36+09:00,"要旨* ガーベッジ・イン、ガーベッジ・アウトは、無意味なデータを入力すると、その結果は無意味なものになる、という概念
* これを、ソフトウェアがそのように振る舞うことが「受け入れられている」という意味で使うのは、正しくない
* ソフトウェアは、無意味なデータが入力されたら、その旨メッセージを出すとか、それがわかるエラーコードを返すような「意味のある」処理をすべきである
* そうすれば、バグの発見が早くなるとか、処理によるデータ破損が防げると言った、開発の効率を上げるのに役立つ"
74,https://note.com/rochefort10/n/na5353e97ce0e,ソフトウェア開発201の鉄則 原則185:進化:ソフトウェアは進化し続ける,2020-03-14T10:24:42+09:00,"要旨* 破棄する、全部作り直す、という状況になるまで、ソフトウェアは進化し続ける
* なぜなら、使われるほど、追加・変更の提案が生まれてくるからである。

解説原文、ほぼ要旨に書いてあることが全て。

「進化=変更、追加により、より良くなる」。変更、追加したくなる理由は、こんなところか。

* より良い使い勝手に気づく
* 不具合を見つけ、修正したくなる
* ソフトウェア技術・環境のが大きく進化するので、それらを取り込みたい
* エンジニアの技術レベルが上がり、よりよい技法や"
75,https://note.com/rochefort10/n/n6149169387fd,ソフトウェア開発201の鉄則 原則39:要求分析:要求仕様を書く前に問題を特定せよ,2020-03-14T10:10:18+09:00,"要旨* 要求を「決める」前に、本当に解決すべき課題と施策を精査しなさい
* 問題に直面すると、エンジニアは直感的にその解決策を進めようとする場合が多いが、それが本当に最適であるとは限らない
* 大抵の場合、解決策は複数ある。それぞれ、コストや所要時間が全然違うものだ
* 「誰にとって」「何が」問題なのか、の観点で、その複数ある解決策について、着手する前に深く調べなさい

解説上記の要旨、随分と意訳して言い換えてみた。

「急いては事をし損じる」だいたい、直感的に、あ、これを直"
76,https://note.com/rochefort10/n/n41f21db70df8,ソフトウェア開発201の鉄則 原則157:管理:適切な資源を割り当てよ,2020-03-13T17:14:19+09:00,"要旨* 予算をケチったり、日程を充分確保しないプロジェクトは、どんなにエンジニアが優れていようがツールが豊富であろうが、必ず失敗に終わる
* 原因は、充分なリソースが確保できてない、という他に、このような状況化だとエンジニアのモチベーションが低下することが挙げられる
* そして、その代償は、きっと想定したものより、大きいくなる

解説必要なリソースをそろえなければうまくいきませんよ、ということに加え、主張したいポイントは、モチベーションが下がるので、出来ることもできなくなり、"
77,https://note.com/rochefort10/n/nc7e3c1c19cc4,ソフトウェア開発201の鉄則 原則5:一般:品質を後からとってつけるようなことはするな,2020-03-13T14:48:02+09:00,"要旨* 品質は、現在開発中のソフトウェアに「付け足す」ことは、できない
* これは、「保守性」「信頼性」「適応性」「テスト可能性」「安全性」といった品質項目のすべての当てはまる真理だ
* 高い品質が必要なら、最初からそれを織り込んでおきなさい
* なので、使い捨てのプロトタイプを製品のベースにするなど、論外だ

解説まず最初に、ソフトウェアの品質は、品質特性モデルとして国際規格 ISO9126 で定められており、6つの特性がある。以下のとおり。

1. 機能性 (Functi"
78,https://note.com/rochefort10/n/n4af53bf2ca12,ソフトウェア開発201の鉄則  原則88:コーディング:グローバル変数を使うな,2020-03-12T19:53:13+09:00,"要旨* グローバル変数は、値を変更するのがカンタンだから便利なものに見えるかもしれない
* が、誰が（モジュール・関数）変更したかわからないので、値が不正だった場合の追跡が難しくなる
* なので、基本使ってはならない。
* データをカプセル化して必ず関数経由で変更するとか、データを関数のパラメータとして明示的に指定する、と言った方法をとるべき

解説え。とてもじゃないけど、便利なものに見えないですけどね〜。マルチスレッドで複数コンテキストを扱うのに慣れている自分からすると、グ"
79,https://note.com/rochefort10/n/ncd33db3feda0,ソフトウェア開発201の鉄則:  原理127：管理:優れた管理は優れた技術よりもずっと重要だ,2020-03-12T08:12:14+09:00,"要旨* 優れた管理は、エンジニアのベストの力を引き出す。逆に、まずい管理は、やる気を失わせる。ツールや技法はその穴埋めはできない。
* ソフトウェアの会社の成功は、技術や製品より、優れた管理と優れたマーケッティングによるところが大きい
* 優れた管理に普遍的なやり方はなく、状況に応じたものになる。
* 高い成果を出したければ、管理者は管理についての教育を受けよ

解説ソフトウェアのプロジェクトでは、なにか大問題が起きたら、「最大の要因は、おそらく技術的なことではない」と考えた"
80,https://note.com/rochefort10/n/nfd86625cbad0,ソフトウェア開発201の鉄則:  原理4:一般:高品質のソフトウェアは可能である,2020-03-12T07:43:48+09:00,"要旨* この世界、機能しない、バグだらけ、要求を満たさない「出来の悪い」ソフトウェアでいっぱいだが
* ちゃんと機能し、バグがほぼなく、要件を満たす「高品質な」ソフトウェアは、実現可能である
* 要件明確化の手法、設計の工夫、優秀な人材の割り当てなど、品質を向上させる実績のあらゆる手法を導入することにより高品質なソフトウェアは実現できる
* ただ、その実現には高額な費用を要する

解説* キチンとした管理
* 快適な環境
* 優秀な人材
* まっとうな計画

これらが全部そろ"
81,https://note.com/rochefort10/n/nc45c8dbf4fb1,ソフトウェア開発201の鉄則  原理38:要求分析:いい加減な要求仕様からはいい加減なコスト見積もりしかできない,2020-03-11T10:42:06+09:00,"要旨* 不正確なコスト見積もり、ほぼ全て要求プロセスが要因だ
* 要求仕様をクリアにするためのプロトタイピングをやれ
* 要求の変更に備えよ。構成管理システムを使うなど、形式的なアプローチをと

解説本文では、コスト見積もりのいい加減さの上位5項目は全部要求プロセスだ、と言っている。

1. 頻繁な要求仕様の変更
2. 要求項目の欠落
3. コミュニケーション不足
4. 要求仕様の質
5. 不十分な分析

で、この原理、「Garbage In Garbage Out（ガーベジ"
82,https://note.com/rochefort10/n/nec23b9450b45,ソフトウェア開発201の鉄則  原理187:製品保証:壊れていないなら直すな,2020-03-11T10:02:29+09:00,"要旨* 直さなくてはならないところ「だけを」変更しよう。それ以外は変更するな
* ソフトウェアは、壊れているところが見えやすく修正しやすい、と思われているが、そうではない
* 修正時に、別の不具合や、修正したい箇所を見つけることがあるが、これを修正しようとしてはならない。大抵は別の不具合を仕込むことになる

解説そうなんですよ。そ、その通りです。

例にある、「バグ修正時に別のバグを見つけた」なら、流石にその別のものは「別件」と扱えるだろう。よくあるのは、修正時にソースコード"
83,https://note.com/rochefort10/n/n39ab463525e7,ソフトウェア開発201の鉄則  原理66:設計:同じものを何度も発明するな,2020-03-11T09:50:58+09:00,"要旨* 既存のソフトウェア部品を有効に活用せよ
* ソフトウェアエンジニアは、同じ部品を何度も繰り返し発明している
* 電子技術者や建築家が新しいものを設計する時に、既にあるものをカタログから調べる行為は「エンジニアリング」と呼ぶ
* が、なぜかソフトウェアエンジニアの場合は、これを「エンジニアリング」と呼ばずに「再利用」と呼ぶ

解説出た〜車輪の再発明。

既にあるものを、それに気づかずに、あるいは気づいてるのに、わざわざ自前で作る。なので似て非なるライブラリがたくさん、と"
84,https://note.com/rochefort10/n/n13e771550e63,ソフトウェア開発201の鉄則 原理135 管理:素晴らしい仕事を期待せよ,2020-03-10T14:48:34+09:00,"要旨* 上司が部下に大きな期待を寄せると、部下は良い結果を達成する
* 上司は、期待していることを示すために行動せよ。やる気にさせるあらゆることを試みなさい。
* それでも成果が上がらなければ、「向いていない」ということ。社内外の他の職場を探したほうがいい。

解説これも、んー1990年代、今のように組織だってソフトウェア開発をやっていなかった（えっと、日本では、ね）時代に、ここまで明言しているのが、すごい。

人の本質なんですよね。期待される、褒められれば、嬉しいし、その気"
85,https://note.com/rochefort10/n/n2a7ab9b501a3,ソフトウェア開発201の鉄則  原理91:コーディング: 意味のある名称を使え,2020-03-10T14:18:44+09:00,"要旨* コード内の変数、関数の名称は、意味の通じる（ヒューマン・リーダブル）、わかりやすいものを使いなさい
* キーストローク削減とか、行数削減で極端に短い名称を使ったりするのは、意味ないですよ

解説いるんだな、極端に短い変数名とか使って喜んでるヤツ。

これと一緒で、自己満足以外の何物でも、ない。

この原則に書いてある例が、わかりやすい。

N_FLT = P_FLT + 1

さて、何のことか、わかりますか？わからんわな。

NEXT_FLIGHT = PREVIOU"
86,https://note.com/rochefort10/n/n925af2ca194d,ソフトウェア開発201の鉄則  原理188:進化の原理:現象を直すのではなく問題を直せ,2020-03-10T12:35:04+09:00,"要旨* ソフトウェアがうまく動作しないときは、
* 不具合の周辺だけ見て原因とおぼしきものを速やかに修正するのではなく
* 不具合の原因を完全に明らかにしなさい
* 開発者は、その原因を完全に理解する「義務」がある

解説バグ。ソフトウェア開発やるなら必ず、お付き合いしなくてはならない相手。

この原理、自明も自明、当たり前のこと。

「現象」というのは、要するに、期待どおりに動作していないことが見てすぐわかるもの。

- ボタン押下でも何にも反応しない
- メモリ確保に失敗"
87,https://note.com/rochefort10/n/n2ddec10d51d1,ソフトウェア開発201の鉄則  原理3:一般: 生産性と品質は不可分である,2020-03-09T15:33:24+09:00,"要旨* 生産性（後述）と品質は明確な相関がある
* 品質に対する要求が高いと、生産性は落ちる。逆に生産性を追求すると品質は落ちる
* 高い品質を保つためには、適切な（本文には明確な数値があるが、略）生産性を保つことが必要である

解説まず、はじめに。

ここでいう生産性（原文も""productivity""）は、単位時間あたりの「作業量」と考えたほうがいい。本文には、一人月あたりのコード行数(KLOCとか) とかFunction Point とか、古典的な生産性の指標が挙がって"
88,https://note.com/rochefort10/n/n3233dd0b2a8e,ソフトウェア開発201の鉄則  原理104:コーディング:言語についての知識はそれほど重要ではない,2020-03-09T11:01:09+09:00,"要旨* プログラマとしての優秀さと言語には関連性はない
* 優れいているエンジニアは、使う言語によらず優れている（その逆もしかり）
* 優れたエンジニアは、どんな言語でも素早く習得できるものだ。それは、すべての言語に共通であるプログラミングの本質を押さえているからである。
* なので、プロジェクトでの言語の選択理由はは、エンジニアの言語習得度であってはならない。

解説Assembler (x86/ppc/arm/mips/マイコン向け)
C/C++/C#/Objective"
89,https://note.com/rochefort10/n/nb58c97e4ab64,ソフトウェア開発201の鉄則  原理2:一般: 品質の定義は人によって異なる,2020-03-09T10:13:27+09:00,"要旨* ソフトウェアの品質は、唯一無二の定義は存在しない
* 品質は、関係者ごとに異なる可能性があるものである
* そして、それらは、互いに両立しないものとなるジレンマがある
* なので、その優先度を決めて、すべての関係者にオープンにする必要がある

解説さらっと読むと、「ま、そうだね、人ごとに違うね」と、さも当然のように思うだろう。が、そのことを理解するのは案外難しい。とにかく、

「品質の定義が関係者ごとに違って、それらが互いに矛盾する」

このようなことがあることを「知"
90,https://note.com/rochefort10/n/n35133171e1ca,ソフトウェア開発201の鉄則  原理172: 管理: プロジェクトの事後検討会（反省会）を実施せよ,2020-03-08T23:33:50+09:00,"要旨* プロジェクトには必ず問題（課題）がある
* プロジェクト終了後に、事後検討会を必ずやりなさい
* 目的は、期間中に起きた問題=うまくいかなかったことを分析しそこから学びを得ること
* この活動は、必ず将来のプロジェクトに多大な恩恵をもたらす

解説いわゆる「振り返り」のこと。今でこそ、ソフトウェア開発での区切りで振り返りをやるプロジェクトは多くなったが、その必要性を1990年代に出版された書籍で30年も前に唱えていたことになる。この書籍に凄さは、ここにある。

振り返"
91,https://note.com/rochefort10/n/na98f7fea5966,ソフトウェア開発201の鉄則  原理1:一般:品質第一,2020-03-08T22:15:25+09:00,"要旨* 品質は何よりも優先されるべきものである
* 品質は計測可能でなくてはならない
* 品質を上げる成果に対して報いるようなメカニズムが必須
* 品質を犠牲にして期限に間に合わせるようなことは絶対にあってはならない。品質が第一の必要条件

解説「品質第一」これが一番最初に来るのが示唆的と言える。201個の鉄則の中でも最重要なもの、と言っていい。

「品質」を定めるのは難しい。それは原則2 以降で述べられている。見方によってはなんでも、品質。ここでは、「顧客を最低限満足させる"
92,https://note.com/rochefort10/n/nc5009fa6e263,ソフトウェア開発201の鉄則  原則87:コーディング:トリックを使うな,2020-03-08T17:31:41+09:00,"要旨 * 知性をひけらかそうとして、小難しい「トリッキーな」コードを書くプログラマーが多い
* しかし、それは単なる自己満足にすぎない、何も賢くない、ばかげたことである
* なので、決して「トリッキーな」プログラムを作るな
* スマートさは、トリックを避けて「オーソドックスな」コードを書くことで示しなさい

解説人は誰しも、「自分を良く見せたい」「評価されたい」という自己肯定感、承認欲求というものを持っている。そのこと自体は、人が持つ欲求の一つなので何ら問題はない。ただ、その"
93,https://note.com/rochefort10/n/nb583f7918c7b,IoT : アニマルウェルフェア,2019-11-25T18:33:06+09:00,"一見、IoT ネタとは関係なさそうだけど、畜産業はIoTの「超」有力なユースケース。IoT技術で対応したい課題のひとつ「アニマルウェルフェア」について。

アニマルウェルフェアとは

直訳すると「動物福祉」。人類の有史以来お世話になっている家畜が、より健康的に、「らしく」生活ができるようにする畜産の在り方のこと。ここに詳しい。

具体的には？

ケージ飼育されている鶏を、放し飼いにして繋がれている牛や羊を放牧して動きの自由を与える、といったもの。自分の体の幅ほどしかないケージ"
94,https://note.com/rochefort10/n/nc372c21bfa57,「脳」面白いな〜,2019-11-24T18:44:11+09:00,"だいぶ前から知ってはいた「なんとか効果」。その「なんとか」をど忘れして調べたついでの備忘録。

プラシーボ効果有効成分がないはずの薬を「効く」と思いながら服薬すると、所望の症状の改善が見られること。「偽薬効果」ともいうらしい。脳が痛みを感じるときに分泌される「エンドルフィン」という物質が、薬を効くと思っている患者にはより多く分泌されることが実験でわかっているとのこと。

逆に、「副作用があるかも」と思いながら薬を投与すると、実際にその懸念していた副作用が現れやすい、というのは"
95,https://note.com/rochefort10/n/n80042ff5b430,IoT : 2020年にIoT活用で恩恵を受ける産業,2019-11-22T12:40:34+09:00,"""OpenGeekLab"" の記事をまとめる。

元記事

導入

・IoT は、コスト削減、新しい利益をもたらす構造、プロセス改善、新しいユーザ体験、またこれらすべてをもたらしてくれるものである。

・この記事では、IoT活用で大きな利益を得る7つの産業を、IoTとは何か、と、IoT ソフトウェアの適切な導入方法と合わせて記述する。

IoT とは

・IoTは、「物理的にインターネットに接続されたデバイス同市のネットワーク（集合体）で、それぞれがデータとして持つ情報の収集"
96,https://note.com/rochefort10/n/n8f49bb77b73f,IoT : 2020年にむけての5つの予想,2019-11-21T21:00:10+09:00,"Forresterというリサーチ会社が公開した、2020年にIoT世界で起こる5つの予測を軽くまとめてみる。

元記事導入・想定読者は、IoT を取り入れてビジネスを加速することを計画している会社のCIO (Chief Information Officer).

・2020年は、多くの、より広いユースケースや応用が我々の生活に浸透する、IoTにとってとても大事な年になる。

・IoTのデバイスは、産業分野にとどまらず消費者（一般ユーザ）にも多くの有用な情報をもたらすものとな"
97,https://note.com/rochefort10/n/n11c638b087eb,恕,2019-11-04T20:06:48+09:00,"子貢問曰「有一言而可以終身行之者乎。」
子曰 「其恕乎。己所不欲、勿施於人。」

「人生で、これさえ守っていれば良い、という一言の言葉はありますか」の問いに対して、孔子先生のお答えが「恕」。

この一言の意味をわかりやすくいうと、「思いやり」。

ネガティブな表現だと、「自分がされたくないことは人にはしてはならない」
ポシティブな表現だと「他を受け容れ、認め、許し、その気持を思いやり
自分のことと同じように人のことを考える」

人生にしても仕事にしても、最も大事なことであるの"
98,https://note.com/rochefort10/n/n294507fd1d11,[海外渡航・第24回] Hawaii / USA (2019年7月25日〜7月31日),2019-08-04T19:42:38+09:00,"結婚20周年を機に、結婚式を挙げたハワイに。もう一度式を挙げた大聖堂を訪れたいというのと、20年前には存在さえしなかった息子たちに外国を体験 させたい、というのが動機。

5泊7日、まぁ書ききれないくらい、言いたいことてんこ盛りだったのですが、旅行記みたいなのはまた別途として、差し当たり「素敵」３つと、「残念」３つ。

素敵！1. セント・アンドリュース教会 (St. Andrew's Cathedral)

ここで結婚式を挙げました。毎年様相が変化し、昔の跡形もないとタクシ"
99,https://note.com/rochefort10/n/n0cf96734aa2f,「ウェブエンジニア」を「エンジニア」と称することに対する違和感,2019-05-26T00:10:57+09:00,"Twitter は、一時的に自分を「IT系エンジニア」と称して、IT系やソフトウェアの動向をウォッチしている。

そこで見たのは、ほとんどが、ウェブ系のソフトウェアエンジニア。で、彼らは、その職業のことを「エンジニア」と称している。

で、、、

何度見ても、（主に）ウェブエンジニアのことを「エンジニア」と表記する投稿は違和感がある。「工学の知識やスキルを備え活躍する人」が「エンジニア」の定義。ウェブだけでなく、ソフトウェアだけでなく、IT だけでなく、機械、電気、電子、制御"
100,https://note.com/rochefort10/n/n952c0df2e627,Dockerのプロキシ設定,2019-04-29T11:59:25+09:00,"社内などのプロキシ環境内でDocker build を行うための設定についてです。情報が混在していて正しく動作させるのに苦労したので、qiita に投稿したのですが、何気ににお役にやっているようなので、ここでも共有しておきます。

https://qiita.com/rochefort8/items/82819b0160ee1273bf4d"
101,https://note.com/rochefort10/n/nefe36e9af38b,”PermissionDispatcher”でAndroidパーミッションをラクに実装！,2019-04-18T21:06:17+09:00,"Androidアプリにて、端末の様々な情報へのアクセスや機能の利用をユーザーに伝え、そのアクセスや機能の許可を促すための仕組み、「パーミッション」。

ストレージ、カメラ等にアクセスするアプリは、このパーミッション機能を必ず実装する必要があります。で、そのパーミッション機能、ベタで書いたら、案外コード量が多く複雑なものになりがちなのですが、""PermissionDispatcher"" というライブラリを使うと、カンタンに実装できることができます。
カメラ・外部ストレージ書き込"
102,https://note.com/rochefort10/n/nb62f495a5b07,[海外渡航・第23回] San Diego / U.S.A (2015年3月29日〜4月4日),2019-04-07T22:55:52+09:00,"何事も、やり続けるって大変ですね。note の投稿はその最たるものかもしれない。少しだけですが、書きます。

海外渡航の備忘録を日付が新しい順に作成中。今回は３年前の、巨大半導体ベンダーへの出張、３年ぶりの海外、そして10年ぶりの西海岸。

San Diego ってスポーツなら、MLBだとパドレス。NFAだとチャージャーズ。あまり強い印象ないですけど。

そして、地図で見るとわかりますが、20キロほど行くと、メキシコ。トムクルーズの映画「トップガン」のロケ地でも有名。

Pa"
103,https://note.com/rochefort10/n/n682839f74721,キャッシュレス・ワールド,2019-03-21T23:56:18+09:00,"各種支払いに現金を使わない「キャッシュレス決済」が徐々に生活の中に浸透してきている。クレジットカード、電子マネー、オンライン支払いに加え、今やだれでも持っているスマートフォンを使ったモバイル決済が普及の決定的な要因であるように思う。

日本は「キャッシュレス後進国」だ

こう断言するのは本当ははばかられるのだが、実際、スウェーデン、アジア各国に比べて、日本はキャッシュレスの浸透は「ゆっくり」だと聞く。それでも、2020年の東京オリンピックに向けて爆発的に広まるのは、きっと、間"
104,https://note.com/rochefort10/n/n78908aceddc9,AWS請求額5千ドル : アカウントのセキュリティ設定は「絶対に」端折るな,2019-03-12T18:17:47+09:00,"強力なクラウドコンピューティング環境、Amazon Web Service (通称AWS)。私も、個人でやっているスマホアプリやウェブサービスの開発で、力いっぱい利用している。

そのAWS のセキュリティ、特にアカウントのセキュリティの設定は「ぜーーーったいに」サボることなく、きちんとやりなさい、というお話です。

「むき出し」状態のアカウント取得直後AWS の強力でかつ豊富なコンピューティングサービス。これらは、メールアドレスとパスワードを登録するだけで利用できてしまう。"
105,https://note.com/rochefort10/n/n56ffa816174f,[海外渡航・第24回] San Diego / U.S.A (2016年1月27日〜1月31日),2019-03-09T21:05:27+09:00,"海外渡航の備忘録を新しい順に作成中。

2015年に引き続き、巨大半導体ベンダーに出張。先方エンジニアとのテクニカル・ディスカッションだったけど、準備不足もあって、稀に見るボロボロ状態（涙）

La Jolla (ラ・ホーヤ)サンディエゴの高級住宅地。そして観光地の一つ。海、絶景でした。

海岸に寝そべる無数のあしかの生で、獣匂すごかったですけど。

写真の海の向こうは日本です。多分w

Uber初体験:何もかもが便利だ公共交通機関が異様なくらい未発達な街。これがなかったら、"
